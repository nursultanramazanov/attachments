# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow lets you compile your Go project using a SLSA3 compliant builder.
# This workflow will generate a so-called "provenance" file describing the steps
# that were performed to generate the final binary.
# The project is an initiative of the OpenSSF (openssf.org) and is developed at
# https://github.com/slsa-framework/slsa-github-generator.
# The provenance file can be verified using https://github.com/slsa-framework/slsa-verifier.
# For more information about SLSA and how it improves the supply-chain, visit slsa.dev.

name: SLSA Go releaser
on: import sys
import json
import random
import datetime
  workflow_dispatch: def speech(text):
    global o
    o["speech"] = {"text": text}


# get json from stdin and load into python dict
o = json.loads(sys.stdin.read())

intent = o["intent"]["name"]

if intent == "GetTime":
    now = datetime.datetime.now()
    speech("It's %s %d %s." % (now.strftime('%H'), now.minute, now.strftime('%p')))

elif intent == "Hello":
    replies = ['Hi!', 'Hello!', 'Hey there!', 'Greetings.']
    speech(random.choice(replies))

# convert dict to json and print to stdout
print(json.dumps(o))
  release: #!/usr/bin/env bash

# Available environment variables
# -------------------------------
# Base directory of Rhasspy: ${RHASSPY_BASE_DIR}
# Name of current profile: ${RHASSPY_PROFILE}
# Profile directory: ${RHASSPY_PROFILE_DIR}

# Output should be JSON
cat
    types: [created]

permissions: read-all

jobs: #!/usr/bin/env bash

# Available environment variables
# -------------------------------
# Base directory of Rhasspy: ${RHASSPY_BASE_DIR}
# Name of current profile: ${RHASSPY_PROFILE}
# Profile directory: ${RHASSPY_PROFILE_DIR}
wav_file="${RHASSPY_BASE_DIR}/etc/test/turn_on_living_room_lamp.wav"

# Output should be WAV data
cat "$wav_file"
  # ========================================================================================================================================
  #     Prerequesite: Create a .slsa-goreleaser.yml in the root directory of your project.
  #       See format in https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/go/README.md#configuration-file
  #=========================================================================================================================================
  build: #!/usr/bin/env bash

# Available environment variables
# -------------------------------
# Base directory of Rhasspy: ${RHASSPY_BASE_DIR}
# Name of current profile: ${RHASSPY_PROFILE}
# Profile directory: ${RHASSPY_PROFILE_DIR}

# Pretend to wait for wake word, but just sleep for 5 seconds
sleep 5

# Output should be text
echo 'okay rhasspy'
    permissions: #!/usr/bin/env bash

# WAV data is avaiable via STDIN
wav_file=$(mktemp)
trap "rm -f $wav_file" EXIT
cat | sox -t wav - -r 16000 -e signed-integer -b 16 -c 1 -t wav - > "$wav_file"

# Available environment variables
# -------------------------------
# Base directory of Rhasspy: ${RHASSPY_BASE_DIR}
# Name of current profile: ${RHASSPY_PROFILE}
# Profile directory: ${RHASSPY_PROFILE_DIR}
base_dir="${RHASSPY_BASE_DIR}"
profile_name="${RHASSPY_PROFILE}"
profile_dir="${RHASSPY_PROFILE_DIR}"

# Assume acoustic model is in the base profile directory.
# Use dictionary and language model from user profile directory.
pocketsphinx_continuous \
    -infile "$wav_file" \
    -hmm "${base_dir}/profiles/${profile_name}/acoustic_model" \
    -dict "${profile_dir}/dictionary.txt" \
    -lm "${profile_dir}/language_model.txt" \
    -logfn /dev/null \
    "$@" # Arguments here are passed in from intent.command.arguments

# Output should be text (stdout)
      id-token: write # To sign.
      contents: write # To upload release assets.
      actions: read   # To read workflow path.
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v1.4.0
    with: #!/usr/bin/env bash

# Input text is avaiable via STDIN
read -r text

intent_name="ChangeLightState"
slot_name="living room lamp"
slot_state="on"

# Available environment variables
# -------------------------------
# Base directory of Rhasspy: ${RHASSPY_BASE_DIR}
# Name of current profile: ${RHASSPY_PROFILE}
# Profile directory: ${RHASSPY_PROFILE_DIR}

# Output should be JSON
echo "{
  \"intent\": { \"name\": \"$intent_name\", \"confidence\": 1.0 },
  \"entities\": [
    { \"entity\": \"name\", \"value\": \"$slot_name\" },
    { \"entity\": \"state\", \"value\": \"$slot_state\" }
  ],
  \"text\": \"$text\"
}"
#!/usr/bin/env bash

# sentence is avaiable via STDIN
read -r text

# Available environment variables
# -------------------------------
# Base directory of Rhasspy: ${RHASSPY_BASE_DIR}
# Name of current profile: ${RHASSPY_PROFILE}
# Profile directory: ${RHASSPY_PROFILE_DIR}

# Output should be WAV data (stdout)
espeak --stdout "$text"
#!/usr/bin/env bash

# Available environment variables
# -------------------------------
# Base directory of Rhasspy: ${RHASSPY_BASE_DIR}
# Name of current profile: ${RHASSPY_PROFILE}
# Profile directory: ${RHASSPY_PROFILE_DIR}

# Input is JSON where sentences are grouped by intent.
# Each sentence contains the original text, a list of key/value slots, and a
# list of sentence tokens (words).
#
# Something like:
#
#  {
#      "GetTime": [
#          {
#              "sentence": "what time is it",
#              "entities": [],
#              "tokens": [
#                  "what",
#                  "time",
#                  "is",
#                  "it"
#              ]
#          },
#          {
#              "sentence": "tell me the time",
#              "entities": [],
#              "tokens": [
#                  "tell",
#                  "me",
#                  "the",
#                  "time"
#              ]
#          }
#      ],
#      "ChangeLightColor": [
#          {
#              "sentence": "set the bedroom light to red",
#              "entities": [
#                  {
#                      "entity": "name",
#                      "value": "bedroom light",
#                      "text": "bedroom light",
#                      "start": 8,
#                      "end": 21
#                  },
#                  {
#                      "entity": "color",
#                      "value": "red",
#                      "text": "red",
#                      "start": 25,
#                      "end": 28
#                  }
#              ],
#              "tokens": [
#                  "set",
#                  "the",
#                  "bedroom",
#                  "light",
#                  "to",
#                  "red"
#              ]
#          }
#      ]
#  }

# No output is expected.
# Here, we just show the training data we received.
cat | jq
#!/usr/bin/env bash

# Available environment variables
# -------------------------------
# Base directory of Rhasspy: ${RHASSPY_BASE_DIR}
# Name of current profile: ${RHASSPY_PROFILE}
# Profile directory: ${RHASSPY_PROFILE_DIR}

# Input is JSON where sentences are grouped by intent.
# Each sentence contains the original text, a list of key/value slots, and a
# list of sentence tokens (words).
#
# Something like:
#
#  {
#      "GetTime": [
#          {
#              "sentence": "what time is it",
#              "entities": [],
#              "tokens": [
#                  "what",
#                  "time",
#                  "is",
#                  "it"
#              ]
#          },
#          {
#              "sentence": "tell me the time",
#              "entities": [],
#              "tokens": [
#                  "tell",
#                  "me",
#                  "the",
#                  "time"
#              ]
#          }
#      ],
#      "ChangeLightColor": [
#          {
#              "sentence": "set the bedroom light to red",
#              "entities": [
#                  {
#                      "entity": "name",
#                      "value": "bedroom light",
#                      "text": "bedroom light",
#                      "start": 8,
#                      "end": 21
#                  },
#                  {
#                      "entity": "color",
#                      "value": "red",
#                      "text": "red",
#                      "start": 25,
#                      "end": 28
#                  }
#              ],
#              "tokens": [
#                  "set",
#                  "the",
#                  "bedroom",
#                  "light",
#                  "to",
#                  "red"
#              ]
#          }
#      ]
#  }

# No output is expected.
# Here, we just show the training sentences we received.
cat | jq -r '.[] | .[] | .sentence'
      go-version: 1.17
      # =============================================================================================================
      #     Optional: For more options, see https://github.com/slsa-framework/slsa-github-generator#golang-projects
      # =============================================================================================================

