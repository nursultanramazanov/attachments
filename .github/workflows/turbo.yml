# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno

name: Deno

on: # See here for image contents: https://github.com/microsoft/vscode-dev-containers/tree/v0.191.1/containers/typescript-node/.devcontainer/base.Dockerfile

# [Choice] Node.js version: 16, 14, 12
ARG VARIANT="16-buster"
FROM mcr.microsoft.com/vscode/devcontainers/typescript-node:0-${VARIANT}

# [Optional] Uncomment this section to install additional OS packages.
RUN apt-get update \
    && export DEBIAN_FRONTEND=noninteractive \
    && apt-get -y install --no-install-recommends \
        openjdk-11-jdk \
        firefox-esr

# Chromium and chrome-driver
ARG CHROMIUM_DEB_URL=https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
RUN wget -qO - $CHROMIUM_DEB_URL > /tmp/chrome_linux64.deb \
    && apt -y install /tmp/chrome_linux64.deb -f \
    && FULL_CHROME_VERSION=$(google-chrome --product-version) \
    && CHROME_VERSION=${FULL_CHROME_VERSION%.*} \
    && CHROMEDRIVER_DIR="/usr/local/share/chrome_driver" \
    && CHROMEDRIVER_BIN="$CHROMEDRIVER_DIR/chromedriver" \
    && LATEST_CHROMEDRIVER_VERSION=$(curl -sL "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION") \
    && CHROMEDRIVER_URL="https://chromedriver.storage.googleapis.com/$LATEST_CHROMEDRIVER_VERSION/chromedriver_linux64.zip" \
    && wget -qO - $CHROMEDRIVER_URL > /tmp/chromedriver_linux64.zip \
    && mkdir -p $CHROMEDRIVER_DIR \
    && unzip -qq /tmp/chromedriver_linux64.zip -d $CHROMEDRIVER_DIR \
    && chmod +x $CHROMEDRIVER_BIN \
    && ln -s "$CHROMEDRIVER_BIN" /usr/bin/ \
    && rm -rf /tmp/chrome*

# [Optional] Uncomment if you want to install an additional version of node using nvm
# ARG EXTRA_NODE_VERSION=10
# RUN su node -c "source /usr/local/share/nvm/nvm.sh && nvm install ${EXTRA_NODE_VERSION}"

# [Optional] Uncomment if you want to install more global node packages
# RUN su node -c "npm install -g <your-package-list -here>"
  push: // For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.191.1/containers/typescript-node
{
  "name": "Node.js & TypeScript",
  "build": {
    "dockerfile": "Dockerfile",
    // Update 'VARIANT' to pick a Node version: 12, 14, 16
    "args": {
      "VARIANT": "16"
    }
  },
  // Set *default* container specific settings.json values on container create.
  "settings": {},
  // Add the IDs of extensions you want installed when the container is created.
  "extensions": [
    "dbaeumer.vscode-eslint"
  ],
  // Use 'forwardPorts' to make a list of ports inside the container available locally.
  // "forwardPorts": [],
  // Use 'postCreateCommand' to run commands after the container is created.
  "postCreateCommand": "yarn install && yarn build",
  // Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
  "remoteUser": "node"
}
    branches: ["main"]
  pull_request: #!/usr/bin/env bash
set -eux

DEV_BUILD_REPO_NAME="hotwired/dev-builds"
DEV_BUILD_ORIGIN_URL="https://${1}@github.com/${DEV_BUILD_REPO_NAME}.git"
BUILD_PATH="$HOME/publish-dev-build"

mkdir "$BUILD_PATH"

cd "$GITHUB_WORKSPACE"
package_name="$(jq -r .name package.json)"
package_files=( dist package.json )
tag="${package_name}/${GITHUB_SHA:0:7}"

name="$(git log -n 1 --format=format:%cn)"
email="$(git log -n 1 --format=format:%ce)"
subject="$(git log -n 1 --format=format:%s)"
date="$(git log -n 1 --format=format:%ai)"
url="https://github.com/${GITHUB_REPOSITORY}/tree/${GITHUB_SHA}"
message="$tag $subject"$'\n\n'"$url"

cp -R "${package_files[@]}" "$BUILD_PATH"

cd "$BUILD_PATH"
git init .
git remote add origin "$DEV_BUILD_ORIGIN_URL"
git symbolic-ref HEAD refs/heads/publish-dev-build
git add "${package_files[@]}"

GIT_AUTHOR_DATE="$date" GIT_COMMITTER_DATE="$date" \
GIT_AUTHOR_NAME="$name" GIT_COMMITTER_NAME="$name" \
GIT_AUTHOR_EMAIL="$email" GIT_COMMITTER_EMAIL="$email" \
  git commit -m "$message"

git tag "$tag"
[ "$GITHUB_REF" != "refs/heads/main" ] || git tag -f "${package_name}/latest"
git push -f --tags

echo done
    branches: ["main"]

permissions: {
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "Turbo: Debug browser tests",
      "cwd": "${workspaceFolder}",
      "port": 9229,
      "outputCapture": "std",
      "internalConsoleOptions": "openOnSessionStart",
      "runtimeExecutable": "yarn",
      "runtimeArgs": ["test"]
    }
  ]
}
  contents: read

jobs: {
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Turbo: Build dist directory",
      "type": "shell",
      "command": "yarn build",
      "group": {
        "kind": "build",
        "isDefault": true
      }
    },
    {
      "label": "Turbo: Run tests",
      "type": "shell",
      "dependsOn": "Turbo: Build dist directory",
      "command": "yarn test",
      "group": {
        "kind": "test",
        "isDefault": true
      }
    },
    {
      "label": "Turbo: Start dev server",
      "type": "shell",
      "dependsOn": "Turbo: Build dist directory",
      "command": "yarn start",
      "problemMatcher": []
    }
  ]
}
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Setup Deno
        # uses: denoland/setup-deno@v1
        uses: denoland/setup-deno@61fe2df320078202e33d7d5ad347e7dcfa0e8f31  # v1.1.2
        with:
          deno-version: v1.x

      # Uncomment this step to verify the use of 'deno fmt' on each commit.
      # - name: Verify formatting
      #   run: deno fmt --check

      - name: Run linter
        run: deno lint

      - name: Run tests
        run: deno test -A
