# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# Find more information at:
# https://github.com/microsoft/msvc-code-analysis-action

name: Microsoft C++ Code Analysis

on: version: 2

aliases:
  docker-cp: &docker-cp
    run:
      name: Create Docker Volume
      command: |
        docker create -v /<?php

class m150913_135853_add_column_attribute_unit extends CDbMigration
{
	public function up()
	{
		$this->addColumn('eav_attribute', 'unit', 'varchar(20)');
	}

	public function down()
	{
		$this->dropColumn('eav_attribute', 'unit');
	}

	/*
	// Use safeUp/safeDown to do migration with transaction
	public function safeUp()
	{
	}

	public function safeDown()
	{
	}
	*/
} --name <?php

class m150924_202359_drop_table_attr_variant extends CDbMigration
{
	public function up()
	{
		$this->dropTable('attr_variant');
	}

	public function down()
	{
		$this->createTable('attr_variant', array(
			'id' => 'pk',
			'attr_id' => 'INT(10) UNSIGNED NOT NULL',
			'title' => 'VARCHAR(255) NOT NULL',
			));
		$this->addForeignKey(
			'ix_attr_id', 'attr_variant', 'attr_id',
			'eav_attribute', 'id', 'CASCADE', 'CASCADE');
	}

	/*
	// Use safeUp/safeDown to do migration with transaction
	public function safeUp()
	{
	}

	public function safeDown()
	{
	}
	*/
} --privileged tizenrt/tizenrt: This file is automatically generated by conda-smithy. If any
particular build configuration is expected, but it is not found,
please make sure all dependencies are satisfiable. To add/modify any
matrix elements, you should create/change conda-smithy's input
recipe/conda_build_config.yaml and re-render the recipe, rather than
editing these files directly. /bin/bash
        docker cp ./. ace:
- 8.0.2
alsa_lib:
- '1.2'
c_compiler:
- gcc
c_compiler_version:
- '13'
cdt_name:
- conda
channel_sources:
- conda-forge
channel_targets:
- gnuradio main
cxx_compiler:
- gxx
cxx_compiler_version:
- '13'
docker_image:
- quay.io/condaforge/linux-anvil-x86_64:cos7
fftw:
- '3'
gmp:
- '6'
gsl:
- '2.7'
libboost_devel:
- '1.84'
libiio:
- '0'
libsndfile:
- '1.2'
libthrift:
- 0.21.0
numpy:
- '1.23'
pin_run_as_build:
  python:
    min_pin: x.x
    max_pin: x.x
pybind11_abi:
- '4'
pyqt:
- '5.15'
python:
- 3.11.* *_cpython
qt_main:
- '5.15'
soapysdr:
- '0.8'
spdlog:
- '1.13'
target_platform:
- linux-64
uhd:
- 4.7.0
volk:
- '3.1'
zeromq:
- 4.3.5
zip_keys:
- - c_compiler_version
  - cxx_compiler_version
- - python
  - numpy:/MACOSX_DEPLOYMENT_TARGET:
- '10.13'
MACOSX_SDK_VERSION:
- '10.13'
ace:
- 8.0.2
c_compiler:
- clang
c_compiler_version:
- '18'
channel_sources:
- conda-forge
channel_targets:
- gnuradio main
cxx_compiler:
- clangxx
cxx_compiler_version:
- '18'
fftw:
- '3'
gmp:
- '6'
gsl:
- '2.7'
libboost_devel:
- '1.84'
libiio:
- '0'
libsndfile:
- '1.2'
libthrift:
- 0.21.0
macos_machine:
- x86_64-apple-darwin13.4.0
numpy:
- '1.23'
pin_run_as_build:
  python:
    min_pin: x.x
    max_pin: x.x
pybind11_abi:
- '4'
pyqt:
- '5.15'
python:
- 3.11.* *_cpython
qt_main:
- '5.15'
soapysdr:
- '0.8'
spdlog:
- '1.13'
target_platform:
- osx-64
uhd:
- 4.7.0
volk:
- '3.1'
zeromq:
- 4.3.5
zip_keys:
- - c_compiler_version
  - cxx_compiler_version
- - python
  - numpy
        docker run -d --rm -it --name ace:
- 8.0.2
c_compiler:
- vs2022
channel_sources:
- conda-forge
channel_targets:
- gnuradio main
cxx_compiler:
- vs2022
fftw:
- '3'
gsl:
- '2.7'
libboost_devel:
- '1.84'
libiio:
- '0'
libsndfile:
- '1.2'
numpy:
- '1.23'
pin_run_as_build:
  python:
    min_pin: x.x
    max_pin: x.x
pybind11_abi:
- '4'
pyqt:
- '5.15'
python:
- 3.11.* *_cpython
qt_main:
- '5.15'
soapysdr:
- '0.8'
spdlog:
- '1.13'
target_platform:
- win-64
uhd:
- 4.7.0
volk:
- '3.1'
zeromq:
- 4.3.5
zip_keys:
- - python
  - numpy --volumes-from=${VOLUME} -w /${WORKING_DIR}/os --privileged tizenrt/tizenrt:${DOCKER_IMG_VERSION} /bin/bash

  arm-version: &arm-version
      run: 
      name: ARM GCC Version
      command: |
        docker exec ${BUILDER} arm-none-eabi-gcc --version

  build-job: &build-job
    run:
      name: TizenRT Build Test
      command: |
        docker exec -it ${BUILDER} bash -c "cd tools; ./configure.sh ${CIRCLE_JOB}"
        docker exec -it ${BUILDER} bash -c "make"


jobs:
  checkout_code:
    machine: 
      image: default
    working_directory: ~/TizenRT
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/TizenRT
          paths:
            - ./
            
  artik055s/audio:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

  artik053/tc:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

  qemu/build_test:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

  esp_wrover_kit/hello_with_tash:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

  imxrt1020-evk/loadable_elf_apps:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

  rtl8721csm/hello:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

  rtl8721csm/loadable_apps:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

  rtl8720e/hello:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

  rtl8720e/loadable_apps:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

  rtl8730e/flat_apps:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

  rtl8730e/loadable_apps:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

  rtl8730e/flat_dev_ddr:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

  rtl8730e/loadable_ext_ddr:
    machine:
      image: default
    working_directory: ~/TizenRT
    steps:
      - attach_workspace:
          at: ~/TizenRT
      - *docker-cp
      - *build-job

workflows:
  version: 2
  build-tizenrt:
    jobs:
      - checkout_code
      - artik055s/audio:
          requires:
            - checkout_code
      - artik053/tc:
          requires:
            - checkout_code
      - qemu/build_test:
          requires:
            - checkout_code
      - esp_wrover_kit/hello_with_tash:
          requires:
            - checkout_code
      - imxrt1020-evk/loadable_elf_apps:
          requires:
            - checkout_code
      - rtl8721csm/hello:
          requires:
            - checkout_code
      - rtl8721csm/loadable_apps:
          requires:
            - checkout_code
      - rtl8720e/hello:
          requires:
            - checkout_code
      - rtl8720e/loadable_apps:
          requires:
            - checkout_code
      - rtl8730e/flat_apps:
          requires:
            - checkout_code
      - rtl8730e/loadable_apps:
          requires:
            - checkout_code
      - rtl8730e/flat_dev_ddr:
          requires:
            - checkout_code
      - rtl8730e/loadable_ext_ddr:
          requires:
            - checkout_code
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '41 10 * * 4'

env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/build'

permissions:
  contents: read

jobs:
  analyze:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Analyze
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure CMake
        run: cmake -B ${{ env.build }}

      # Build is not required unless generated source files are used
      # - name: Build CMake
      #   run: cmake --build ${{ env.build }}

      - name: Initialize MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@04825f6d9e00f87422d6bf04e1a38b1f3ed60d99
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      # - name: Upload SARIF as an Artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: sarif-file
      #     path: ${{ steps.run-analysis.outputs.sarif }}
