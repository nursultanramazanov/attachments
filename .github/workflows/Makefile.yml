# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno

name: Deno

on: dramsim_test
  push: 
#tell the linker the rpath so that we don't have to muck with LD_LIBRARY_PATH, etc
dramsim_test: dramsim_test.cpp
        $(CXX) -g -o dramsim_test dramsim_test.cpp -I../ -L../ -ldramsim -Wl,-rpath=../

clean: 
        rm dramsim_test
    branches: ["main"]
  pull_request: #include <stdio.h>
#include "dramsim_test.h"

using namespace DRAMSim;

/* callback functors */
void some_object::read_complete(unsigned id, uint64_t address, uint64_t clock_cycle)
{
        printf("[Callback] read complete: %d 0x%lx cycle=%lu\n", id, address, clock_cycle);
}

void some_object::write_complete(unsigned id, uint64_t address, uint64_t clock_cycle)
{
        printf("[Callback] write complete: %d 0x%lx cycle=%lu\n", id, address, clock_cycle);
}

/* FIXME: this may be broken, currently */
void power_callback(double a, double b, double c, double d)
{
//        printf("power callback: %0.3f, %0.3f, %0.3f, %0.3f\n",a,b,c,d);
}

int some_object::add_one_and_run(MultiChannelMemorySystem *mem, uint64_t addr)
{

        /* create a transaction and add it */
        bool isWrite = false; 
        mem->addTransaction(isWrite, addr);

        // send a read to channel 1 on the same cycle 
        addr = 1LL<<33 | addr; 
        mem->addTransaction(isWrite, addr);

        for (int i=0; i<5; i++)
        {
                mem->update();
        }

        /* add another some time in the future */

        // send a write to channel 0 
        addr = 0x900012; 
        isWrite = true; 
        mem->addTransaction(isWrite, addr);


        /* do a bunch of updates (i.e. clocks) -- at some point the callback will fire */
        for (int i=0; i<45; i++)
        {
                mem->update();
        }

        /* get a nice summary of this epoch */
        mem->printStats(true);

        return 0;
}

int main()
{
        some_object obj;
        TransactionCompleteCB *read_cb = new Callback<some_object, void, unsigned, uint64_t, uint64_t>(&obj, &some_object::read_complete);
        TransactionCompleteCB *write_cb = new Callback<some_object, void, unsigned, uint64_t, uint64_t>(&obj, &some_object::write_complete);

        /* pick a DRAM part to simulate */
        MultiChannelMemorySystem *mem = getMemorySystemInstance("ini/DDR2_micron_16M_8b_x8_sg3E.ini", "system.ini", "..", "example_app", 16384); 


        mem->RegisterCallbacks(read_cb, write_cb, power_callback);
        MultiChannelMemorySystem *mem2 = getMemorySystemInstance("ini/DDR2_micron_16M_8b_x8_sg3E.ini", "system.ini", "..", "example_app", 16384); 

        mem2->RegisterCallbacks(read_cb, write_cb, power_callback);

        printf("dramsim_test main()\n");
        printf("-----MEM1------\n");
        obj.add_one_and_run(mem, 0x100001UL);
        obj.add_one_and_run(mem, 0x200002UL);

        printf("-----MEM2------\n");
        obj.add_one_and_run(mem2, 0x300002UL);
        return 0; 
}

    branches: ["main"]

permissions: #include <string>
#include <stdint.h>
#include <DRAMSim.h>

class some_object
{
        public: 
                void read_complete(unsigned, uint64_t, uint64_t);
                void write_complete(unsigned, uint64_t, uint64_t);
                int add_one_and_run(DRAMSim::MultiChannelMemorySystem *mem, uint64_t addr);
};
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Setup Deno
        # uses: denoland/setup-deno@v1
        uses: denoland/setup-deno@61fe2df320078202e33d7d5ad347e7dcfa0e8f31  # v1.1.2
        with:
          deno-version: v1.x

      # Uncomment this step to verify the use of 'deno fmt' on each commit.
      # - name: Verify formatting
      #   run: deno fmt --check

      - name: Run linter
        run: deno lint

      - name: Run tests
        run: deno test -A
