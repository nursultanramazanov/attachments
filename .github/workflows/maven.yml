# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on: // Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package com.android.webview.chromium;

import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;

/**
 * Activity for displaying WebView OSS licenses.
 * This is compiled into the stub WebView and so should not depend on any classes from Chromium
 * other than LicenseContentProvider.
 */
public class LicenseActivity extends Activity {
    private static final String LICENSES_URI_SUFFIX = "LicenseContentProvider/webview_licenses";
    private static final String LICENSES_CONTENT_TYPE = "text/html";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        final String packageName = getPackageName();
        final Intent intent = new Intent(Intent.ACTION_VIEW);
        final String licenseUri =
                String.format("content://%s.%s", packageName, LICENSES_URI_SUFFIX);
        intent.setDataAndType(Uri.parse(licenseUri), LICENSES_CONTENT_TYPE);
        intent.addCategory(Intent.CATEGORY_DEFAULT);
        // Resources are accessed via getIdentifier because resource ids in the standalone system
        // webview apk have incorrect package_ids. Accessing resources via getIdentifier needs to be
        // whitelisted in //android_webview/aapt2.config. see https://crbug.com/894208
        final int titleId =
                getResources().getIdentifier("license_activity_title", "string", packageName);
        if (titleId != 0) {
            intent.putExtra(Intent.EXTRA_TITLE, getString(titleId));
        }
        intent.setPackage("com.android.htmlviewer");

        try {
            startActivity(intent);
        } catch (ActivityNotFoundException e) {
            Log.e("WebView", "Failed to find viewer", e);
        }
        finish();
    }
}
  push: // Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package com.android.webview.chromium;

import android.annotation.TargetApi;
import android.content.ContentProvider;
import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.ParcelFileDescriptor;

import org.chromium.base.FileUtils;
import org.chromium.components.aboutui.CreditUtils;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/**
 * Content provider for about:credits.
 * Used by SystemWebview and TrichromeWebview, but not Monochrome.
 */
@TargetApi(Build.VERSION_CODES.LOLLIPOP)
public class LicenseContentProvider
        extends ContentProvider implements ContentProvider.PipeDataWriter<String> {
    public static final String LICENSES_URI_SUFFIX = "LicenseContentProvider/webview_licenses";
    public static final String LICENSES_CONTENT_TYPE = "text/html";
    private static final String TAG = "LicenseCP";

    @Override
    public boolean onCreate() {
        return true;
    }

    @Override
    public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {
        if (uri != null && uri.toString().endsWith(LICENSES_URI_SUFFIX)) {
            return openPipeHelper(null, null, null, "webview_licenses.notice", this);
        }
        return null;
    }

    @Override
    public void writeDataToPipe(
            ParcelFileDescriptor output, Uri uri, String mimeType, Bundle opts, String filename) {
        if (WebViewApkApplication.initializeNative()) {
            CreditUtils.nativeWriteCreditsHtml(output.detachFd());
        } else {
            // Missing native library means we're the webview stub and licenses are stored as an
            // asset.
            try (InputStream in = getContext().getAssets().open(filename);
                    OutputStream out = new FileOutputStream(output.getFileDescriptor())) {
                FileUtils.copyStream(in, out);
            } catch (IOException ioException) {
                throw new RuntimeException(ioException);
            }
        }
    }

    @Override
    public String getType(Uri uri) {
        if (uri != null && uri.toString().endsWith(LICENSES_URI_SUFFIX)) {
            return LICENSES_CONTENT_TYPE;
        }
        return null;
    }

    @Override
    public int update(Uri uri, ContentValues values, String where, String[] whereArgs) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        throw new UnsupportedOperationException();
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        throw new UnsupportedOperationException();
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
            String sortOrder) {
        throw new UnsupportedOperationException();
    }
}
    branches: [ "main" ]
  pull_request: // Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package com.android.webview.chromium;

import android.app.Application;
import android.content.Context;

import org.chromium.base.ContextUtils;
import org.chromium.base.annotations.JNINamespace;
import org.chromium.base.library_loader.LibraryLoader;
import org.chromium.components.embedder_support.application.FontPreloadingWorkaround;

/**
 * Application subclass for SystemWebView and Trichrome.
 *
 * Application subclass is only used in renderer processes and in the WebView APK's own services.
 * None of this code runs in an application which simply uses WebView.
 */
@JNINamespace("android_webview")
public class WebViewApkApplication extends Application {
    // Called by the framework for ALL processes. Runs before ContentProviders are created.
    // Quirk: context.getApplicationContext() returns null during this method.
    @Override
    protected void attachBaseContext(Context context) {
        super.attachBaseContext(context);
        ContextUtils.initApplicationContext(this);
    }

    @Override
    public void onCreate() {
        super.onCreate();
        FontPreloadingWorkaround.maybeInstallWorkaround(this);
    }

    /**
     * Performs minimal native library initialization required when running as a stand-alone APK.
     * @return True if the library was loaded, false if running as webview stub.
     */
    static synchronized boolean initializeNative() {
        try {
            if (LibraryLoader.getInstance().isInitialized()) {
                return true;
            }
            LibraryLoader.getInstance().loadNow();
        } catch (Throwable unused) {
            // Happens for WebView Stub. Throws NoClassDefFoundError because of no
            // NativeLibraries.java being generated.
            return false;
        }
        LibraryLoader.getInstance().switchCommandLineForWebView();
        nativeInitializePakResources();
        return true;
    }

    private static native void nativeInitializePakResources();
}
    branches: [ "main" ]

jobs: <?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright (c) 2012 The Chromium Authors. All rights reserved.  Use of this
  source code is governed by a BSD-style license that can be found in the
  LICENSE file.
-->

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    package="{{manifest_package|default('com.android.webview')}}"
    tools:ignore="MissingLeanbackLauncher">
    <uses-sdk android:minSdkVersion="{{min_sdk_version|default(21)}}"
              android:targetSdkVersion="{{target_sdk_version|default(29)}}"
              {% if max_sdk_version is defined %}
                android:maxSdkVersion="{{max_sdk_version}}"
              {% endif %}>
    </uses-sdk>

    <uses-feature android:name="android.hardware.touchscreen"
                  android:required="false" />
    <uses-feature android:name="android.software.leanback"
                  android:required="false" />

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application android:label="{{ application_label|default('Android System WebView') }}"
                 android:icon="@{{manifest_package|default('com.android.webview')}}:drawable/icon_webview"
                 android:name="{{ application_name|default('com.android.webview.chromium.WebViewApkApplication') }}"
                 android:multiArch="true"
                 android:use32bitAbi="true"
                 android:extractNativeLibs="{{ trichrome_library is not defined }}">
        {# This part is shared between stand-alone WebView and Monochrome #}
        {% macro common(manifest_package, webview_lib) %}
            <meta-data android:name="com.android.webview.WebViewLibrary"
                       android:value="{{ webview_lib }}" />
            <activity android:name="com.android.webview.chromium.LicenseActivity"
                      android:label="@string/license_activity_title">
                <intent-filter>
                    <action android:name="android.settings.WEBVIEW_LICENSE" />
                    <category android:name="android.intent.category.DEFAULT" />
                </intent-filter>
                <meta-data android:name="com.android.settings.PRIMARY_PROFILE_CONTROLLED"
                           android:value="true" />
            </activity>
            <provider android:name="com.android.webview.chromium.LicenseContentProvider"
                      android:exported="true"
                      android:authorities="{{ manifest_package }}.LicenseContentProvider" />
            {% if donor_package is not defined %}
                <!-- If you change the variations services, also see
                     android_webview/test/shell/AndroidManifest.xml. -->
                <service android:name="org.chromium.android_webview.services.VariationsSeedServer"
                         android:exported="true"
                         android:process=":webview_service" />
                <service android:name="org.chromium.android_webview.services.AwVariationsSeedFetcher"
                         android:permission="android.permission.BIND_JOB_SERVICE"
                         android:exported="false"
                         android:process=":webview_service" />
                <service android:name="org.chromium.android_webview.services.CrashReceiverService"
                         android:exported="true"
                         android:process=":webview_service" />
                <service android:name="org.chromium.android_webview.services.AwMinidumpUploadJobService"
                         android:permission="android.permission.BIND_JOB_SERVICE"
                         android:exported="true"
                         android:process=":webview_service" />
            {% endif %}
        {% endmacro %}
        {{ common(manifest_package|default('com.android.webview'), library|default('libwebviewchromium.so')) }}
        {% if donor_package is defined %}
            <meta-data android:name="com.android.webview.WebViewDonorPackage"
                       android:value="{{ donor_package }}" />
        {% endif %}
        {% set num_sandboxed_services = 40 %}
        <meta-data android:name="org.chromium.content.browser.NUM_SANDBOXED_SERVICES"
                   android:value="{{ num_sandboxed_services }}" />
        {% for i in range(num_sandboxed_services) %}
            <service android:name="org.chromium.content.app.SandboxedProcessService{{ i }}"
                     android:process=":sandboxed_process{{ i }}"
                     android:isolatedProcess="true"
                     android:exported="true"
                     android:externalService="true"
                     tools:ignore="ExportedService"
                     android:visibleToInstantApps="true" />
        {% endfor %}
        <meta-data android:name="org.chromium.content.browser.NUM_PRIVILEGED_SERVICES"
                   android:value="0" />
        {% if trichrome_library is defined %}
        <uses-static-library
            android:name="{{ trichrome_library }}"
            android:version="{{ trichrome_version }}"
            android:certDigest="{{ trichrome_certdigest }}" />
        {% endif %}
    </application>
</manifest>
  build: # Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

-keepclassmembers class org.chromium.android_webview.AwPdfExporter {
    android.view.ViewGroup mContainerView;
}

# Keep the factory and its public members; it's the main entry point used by the
# framework.
-keep class com.android.webview.chromium.WebViewChromiumFactoryProvider {
    public *;
}

-keep class * implements android.webkit.WebViewFactoryProvider$Statics {
    *;
}

-keep class com.android.webview.chromium.ContentSettingsAdapter {
    public *;
}

-keep class com.android.webview.chromium.WebViewChromiumFactoryProviderFor* {
    public *;
}

-keep class com.android.webview.chromium.WebViewDatabaseAdapter {
  public *;
}

# This is the main entry point for APIs. It is kept to make developing with
# unreleased Android easier.
-keep class com.android.webview.chromium.WebViewChromium {
  public *;
}

# Functor classes with native methods implemented in Android.
-keep class com.android.webview.chromium.DrawFunctor
-keep class com.android.webview.chromium.DrawGLFunctor
-keep class com.android.webview.chromium.GraphicsUtils

# Linker dynamically casts to $TestRunner when running tests. We don't run these
# tests in WebView.
-dontnote org.chromium.base.library_loader.Linker$TestRunner

# Don't note about the API 21 compatibility code which references various
# hidden APIs via reflection.
-dontnote com.android.webview.chromium.WebViewDelegateFactory$Api21CompatibilityDelegate

# DefaultAndroidKeyStore uses reflection to access internal OpenSSL state.
-dontnote org.chromium.net.DefaultAndroidKeyStore

# MediaPlayerBridge uses reflection to access internal metadata.
-dontnote org.chromium.media.MediaPlayerBridge

# ProxyChangeListener$ProxyReceiver uses reflection to access internal
# android.net.ProxyProperties.
-dontnote org.chromium.net.ProxyChangeListener$ProxyReceiver

# Silence warnings about reflection used to check for onShow/HideCustomView.
# This class is not really kept since it's in a library jar.
-keep class android.webkit.WebChromeClient {
  void onShowCustomView(...);
  void onHideCustomView();
}

-keep class org.chromium.android_webview.AwBrowserProcess {
    java.nio.channels.FileLock sExclusiveFileLock;
}

# Accessed via reflection but not present in all builds
-keep class com.android.webview.chromium.AwSafeBrowsingApiHandler {
  AwSafeBrowsingApiHandler(...);
}
-dontnote com.android.webview.chromium.AwSafeBrowsingApiHandler

# We strip some unused resources when preprocessing the GMS client libs.
-dontwarn com.google.android.gms.R**

# Trichrome builds don't include a native library list in the main APK; it's
# picked up from the library APK at runtime.
-dontwarn org.chromium.base.library_loader.NativeLibraries

    runs-on: ubuntu-latest

    steps: # Copyright 2017 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/android/rules.gni")

# Monochrome uses a different copy of LicenseContentProvider.java.
# This one is used in Trichrome and SystemWebview.
android_library("webview_license_provider_java") {
  java_files =
      [ "java/src/com/android/webview/chromium/LicenseContentProvider.java" ]
  deps = [
    ":apk_java",
    "//base:base_java",
    "//components/about_ui/android:aboutui_java",
  ]
}

# TODO(agrieve): Delete once downstream reference is updated.
java_group("webview_license_activity_java") {
  deps = [
    ":apk_java",
  ]
}

# Contains classes needed by the webview apk, but not used when loading the apk
# as a library.
android_library("apk_java") {
  java_files = [
    "java/src/com/android/webview/chromium/LicenseActivity.java",
    "java/src/com/android/webview/chromium/WebViewApkApplication.java",
  ]
  deps = [
    "//base:base_java",
    "//components/embedder_support/android:application_java",
  ]
}
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with: // Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "jni/WebViewApkApplication_jni.h"

#include "android_webview/common/aw_resource_bundle.h"
#include "base/android/base_jni_onload.h"
#include "base/logging.h"

namespace android_webview {

void JNI_WebViewApkApplication_InitializePakResources(JNIEnv* env) {
  CHECK(base::android::OnJNIOnLoadInit());
  InitIcuAndResourceBundleBrowserSide();
}

}  // namespace android_webview
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
