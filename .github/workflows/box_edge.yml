# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on: migrator_ts: 1695775149
__migrator:
  kind: version
  migration_number: 1
  bump_number: 1
  commit_message: "Rebuild for libboost 1.82"
  # limit the number of prs for ramp-up
  pr_limit: 10
libboost_devel:
  - 1.82
# This migration is matched with a piggy-back migrator
# (see https://github.com/regro/cf-scripts/pull/1668)
# that will replace boost-cpp with libboost-devel
boost_cpp:
  - 1.82
# same for boost -> libboost-python-devel
libboost_python_devel:
  - 1.82
boost:
  - 1.82
  push: __migrator:
  build_number: 1
  kind: version
  migration_number: 1
fmt:
- '10'
migrator_ts: 1683802784.4940007
    branches: [ "main" ]
  pull_request: __migrator:
  build_number: 1
  kind: version
  migration_number: 1
libthrift:
- 0.19.0
migrator_ts: 1693762377.7427814
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule: migrator_ts: 1698047052
__migrator:
  kind: version
  migration_number: 1
  bump_number: 1

zeromq:
  - '4.3.5'
    - cron: '34 23 * * 5'

permissions: This file is automatically generated by conda-smithy. If any
particular build configuration is expected, but it is not found,
please make sure all dependencies are satisfiable. To add/modify any
matrix elements, you should create/change conda-smithy's input
recipe/conda_build_config.yaml and re-render the recipe, rather than
editing these files directly.
  contents: alsa_lib:
- '1.2'
c_compiler:
- gcc
c_compiler_version:
- '12'
cdt_name:
- cos7
channel_sources:
- conda-forge
channel_targets:
- gnuradio main
cxx_compiler:
- gxx
cxx_compiler_version:
- '12'
docker_image:
- quay.io/condaforge/linux-anvil-cos7-x86_64
fftw:
- '3'
gmp:
- '6'
gsl:
- '2.7'
libboost_devel:
- '1.82'
libiio:
- '0'
libsndfile:
- '1.2'
libthrift:
- 0.20.0
numpy:
- '1.23'
pin_run_as_build:
  python:
    min_pin: x.x
    max_pin: x.x
pybind11_abi:
- '4'
pyqt:
- '5.15'
python:
- 3.11.* *_cpython
qt_main:
- '5.15'
soapysdr:
- '0.8'
spdlog:
- '1.12'
target_platform:
- linux-64
uhd:
- 4.6.0
volk:
- '3.1'
zeromq:
- 4.3.5
zip_keys:
- - c_compiler_version
  - cxx_compiler_version
- - python
  - numpy

jobs: MACOSX_DEPLOYMENT_TARGET:
- '10.13'
MACOSX_SDK_VERSION:
- '10.13'
c_compiler:
- clang
c_compiler_version:
- '16'
channel_sources:
- conda-forge
channel_targets:
- gnuradio main
cxx_compiler:
- clangxx
cxx_compiler_version:
- '16'
fftw:
- '3'
gmp:
- '6'
gsl:
- '2.7'
libboost_devel:
- '1.82'
libiio:
- '0'
libsndfile:
- '1.2'
libthrift:
- 0.20.0
macos_machine:
- x86_64-apple-darwin13.4.0
numpy:
- '1.23'
pin_run_as_build:
  python:
    min_pin: x.x
    max_pin: x.x
pybind11_abi:
- '4'
pyqt:
- '5.15'
python:
- 3.11.* *_cpython
qt_main:
- '5.15'
soapysdr:
- '0.8'
spdlog:
- '1.12'
target_platform:
- osx-64
uhd:
- 4.6.0
volk:
- '3.1'
zeromq:
- 4.3.5
zip_keys:
- - c_compiler_version
  - cxx_compiler_version
- - python
  - numpy
  codacy-security-scan: c_compiler:
- vs2022
channel_sources:
- conda-forge
channel_targets:
- gnuradio main
cxx_compiler:
- vs2022
fftw:
- '3'
gsl:
- '2.7'
libboost_devel:
- '1.82'
libiio:
- '0'
libsndfile:
- '1.2'
numpy:
- '1.23'
pin_run_as_build:
  python:
    min_pin: x.x
    max_pin: x.x
pybind11_abi:
- '4'
pyqt:
- '5.15'
python:
- 3.11.* *_cpython
qt_main:
- '5.15'
soapysdr:
- '0.8'
spdlog:
- '1.12'
target_platform:
- win-64
uhd:
- 4.6.0
volk:
- '3.1'
zeromq:
- 4.3.5
zip_keys:
- - python
  - numpy
    permissions: setlocal EnableDelayedExpansion
@echo on

:: Make a build folder and change to it
cmake -E make_directory build
if errorlevel 1 exit 1
cd build
if errorlevel 1 exit 1

:: configure
cmake -G "Ninja" ^
    -DCMAKE_BUILD_TYPE=Release ^
    -DCMAKE_INSTALL_PREFIX="%LIBRARY_PREFIX%" ^
    -DCMAKE_PREFIX_PATH="%LIBRARY_PREFIX%" ^
    -DPYTHON_EXECUTABLE="%PYTHON%" ^
    -DGR_PYTHON_DIR="%SP_DIR%" ^
    ..
if errorlevel 1 exit 1

:: build
cmake --build . --config Release -- -j%CPU_COUNT%
if errorlevel 1 exit 1

:: install
cmake --build . --config Release --target install
if errorlevel 1 exit 1

:: test
set SKIP_TESTS=^
%=EMPTY=%

ctest --build-config Release --output-on-failure --timeout 120 -j%CPU_COUNT% -E "%SKIP_TESTS%"
if errorlevel 1 exit 1

:: now run the skipped tests to see failures, but exit without error anyway
ctest --build-config Release --output-on-failure --timeout 120 -j%CPU_COUNT% -R "%SKIP_TESTS%"
exit 0
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name:  #!/usr/bin/env bash

if [[ $target_platform == osx* ]] ; then
    CXXFLAGS="${CXXFLAGS} -D_LIBCPP_DISABLE_AVAILABILITY"
fi

# Workaround for no std::aligned_alloc with osx-64
# https://github.com/chriskohlhoff/asio/issues/1090
# Maybe remove when boost is updated to 1.80.0?
if [[ "${target_platform}" == "osx-64" ]]; then
  export CXXFLAGS="-DBOOST_ASIO_DISABLE_STD_ALIGNED_ALLOC ${CXXFLAGS}"
fi

cmake -E make_directory build
cd build

cmake_config_args=(
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_PREFIX_PATH=$PREFIX
    -DCMAKE_INSTALL_PREFIX=$PREFIX
    -DLIB_SUFFIX=""
    -DPYTHON_EXECUTABLE=$PYTHON
    -DGR_PYTHON_DIR=$SP_DIR
)

cmake ${CMAKE_ARGS} -G "Ninja" .. "${cmake_config_args[@]}"
cmake --build . --config Release -- -j${CPU_COUNT}

cmake --build . --config Release --target install

if [[ $target_platform == linux* ]] ; then
    export QT_QPA_PLATFORM=offscreen
    SKIP_TESTS=(
    )
else
    SKIP_TESTS=(
    )
fi
SKIP_TESTS_STR=$( IFS="|"; echo "^(${SKIP_TESTS[*]})$" )

ctest --build-config Release --output-on-failure --timeout 120 -j${CPU_COUNT} -E "$SKIP_TESTS_STR"

# now run the skipped tests to see the failures, but don't error out
ctest --build-config Release --output-on-failure --timeout 120 -j${CPU_COUNT} -R "$SKIP_TESTS_STR" || exit 0
    runs-on: channel_targets:
  - gnuradio main
c_compiler:    # [win]
- vs2022       # [win]
cxx_compiler:  # [win]
- vs2022       # [win]
    steps: {% set name = "gnuradio-dev" %}
# Set package version from cleaned up git tags if possible,
# otherwise fall back to date-based version.
{% set tag_version = environ.get("GIT_DESCRIBE_TAG", "")|string|replace("-","_")|replace("v","")|replace("git","") %}
{% set post_commit = environ.get("GIT_DESCRIBE_NUMBER", 0)|string %}
{% set hash = environ.get("GIT_DESCRIBE_HASH", "local")|string %}
{% set fallback_version = "0.0.0.{0}.dev+g{1}".format(datetime.datetime.now().strftime("%Y%m%d"), environ.get("GIT_FULL_HASH", "local")[:9]) %}
{% set version = (tag_version if post_commit == "0" else "{0}.post{1}+{2}".format(tag_version, post_commit, hash)) if tag_version else fallback_version %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  # use local path or git repository depending on if the build is local or done on CI
  path: "../.."  # [not os.environ.get("CI")]
  git_url: {{ environ.get('FEEDSTOCK_ROOT', "../..") }}  # [os.environ.get("CI")]

build:
  number: 0
  skip: true  # [py!=311]
  entry_points:
    - gnuradio-companion = gnuradio.grc.main:main  # [win]
    - gr_filter_design = gnuradio.filter.filter_design:main  # [win]
    - gr_modtool = gnuradio.modtool.cli.base:cli  # [win]
    - grcc = gnuradio.grc.compiler:main  # [win]
    - uhd_siggen = gnuradio.uhd.uhd_siggen_base:main  # [win]
  run_exports:
    - {{ pin_subpackage('gnuradio-dev', max_pin='x.x.x') }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake >=3.8
    - git
    - ninja
    - pkg-config  # [not win]
    - sysroot_linux-64 2.17  # [linux64]
    - thrift-compiler
    # cross-compilation requirements
    - python                              # [build_platform != target_platform]
    - cross-python_{{ target_platform }}  # [build_platform != target_platform]
    - pybind11                            # [build_platform != target_platform]
    - numpy                               # [build_platform != target_platform]
   # below are needed to link with Qt for qtgui
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
  host:
    - click
    - click-plugins
    - codec2
    - fftw
    - gmp  # [not win]
    - gsl
    - libboost-devel
    - libsndfile
    - libthrift  # [not win]
    - mako
    - mpir  # [win]
    - numpy
    - packaging
    - pip  # [win]
    - pybind11
    - pybind11-abi
    - python
    - spdlog
    - thrift  # [not win]
    - volk
  # gnuradio.audio
    - alsa-lib  # [linux]
    - jack  # [linux]
    - portaudio
  # gnuradio companion
    - gtk3
    - lxml
    - pygobject
    - pyyaml
    - jsonschema
  # gnuradio.iio
    - libiio
    - libad9361-iio
  # gnuradio.qtgui
    - pyqt
    - qt-main
    - qwt
  # gnuradio.soapy
    - soapysdr
  # gnuradio.uhd
    - uhd
  # gnuradio.video_sdl
    - sdl
  # gnuradio.zeromq
    - cppzmq
    - zeromq
  # below needed only to run tests in host environment
    - pytest
    - pyzmq
    - setuptools
  run:
    - alsa-plugins  # [linux]
    - click
    - click-plugins
    - fftw
    - lxml
    - mako
    - matplotlib-base
    - menuinst  # [win]
    - numpy
    - packaging
    - {{ pin_compatible('portaudio') }}
    - pygobject
    - pyqt
    - pyqtgraph
    - python
    - pyyaml
    - jsonschema
    - pyzmq
    - {{ pin_compatible('qwt', max_pin='x.x') }}
    - scipy
    # need setuptools because modtool uses pkg_resources
    - setuptools
    - thrift  # [not win]
  run_constrained:
  # conflict with the non-dev conda-forge packages
  # by constraining to non-existent version
    - gnuradio-core ==9999999999
    - gnuradio-grc ==9999999999
    - gnuradio-qtgui ==9999999999
    - gnuradio-soapy ==9999999999
    - gnuradio-uhd ==9999999999
    - gnuradio-video-sdl ==9999999999
    - gnuradio-zeromq ==9999999999

test:
  commands:
    - gnuradio-config-info -v --prefix --sysconfdir --prefsdir --userprefsdir --prefs --builddate --enabled-components --cc --cxx --cflags
    - gr_modtool --help
  imports:
    - gnuradio.analog
    - gnuradio.audio
    - gnuradio.blocks
    - gnuradio.channels
    - gnuradio.digital
    - gnuradio.dtv
    - gnuradio.fec
    - gnuradio.fft
    - gnuradio.filter
    - gnuradio.gr
    - gnuradio.iio
    - gnuradio.network
    - gnuradio.pdu
    - gnuradio.qtgui
    - gnuradio.soapy
    - gnuradio.trellis
    - gnuradio.uhd
    - gnuradio.video_sdl
    - gnuradio.vocoder
    - gnuradio.wavelet
    - gnuradio.zeromq
    - pmt

about:
  home: https://gnuradio.org/
  license: GPL-3.0-or-later
  license_file: COPYING
  summary: The free and open software radio ecosystem
  description: >
    GNU Radio is a free software development toolkit that provides the signal
    processing runtime and processing blocks to implement software radios using
    readily-available, low-cost external RF hardware and commodity processors.
    It is widely used in hobbyist, academic and commercial environments to
    support wireless communications research as well as to implement real-world
    radio systems.

    GNU Radio applications are primarily written using the Python programming
    language, while the supplied, performance-critical signal processing path
    is implemented in C++ using processor floating point extensions where
    available. Thus, the developer is able to implement real-time, high-
    throughput radio systems in a simple-to-use, rapid-application-development
    environment.
  doc_url: https://gnuradio.org/doc/doxygen/
  dev_url: https://github.com/gnuradio/gnuradio

extra:
  recipe-maintainers:
    - ryanvolz
      # Checkout the repository to the GitHub Actions runner
      - name: mesa-libGL
mesa-dri-drivers
xorg-x11-server-Xvfb
        uses: Users
*****

This recipe is primarily used for CI builds, although it is possible to use it
locally from a checked-out git repository with "conda-build".

Developers
**********

CI builds use this recipe and the settings in .conda/conda-forge.yml. Any changes
to the recipe should be accompanied by running

    conda-smithy rerender --feedstock_config .conda/conda-forge.yml -c auto
    git rm -f .github/workflows/automerge.yml .github/workflows/webservices.yml .circleci/config.yml
    git commit --amend -s

so that the generated build scripts are updated when necessary.
***** RUN THE ABOVE TO CHECK FOR UPDATES WHENEVER EDITS ARE MADE in .conda *****

You can also re-render from a pull request by starting a comment with "/rerender", which will trigger a Github workflow to perform the above steps.

The CI will build conda packages for commits and pull requests, and it will
upload the packages to Anaconda Cloud on commits to the branch specified
in the configuration below. The channel and label that the packages are
uploaded to are set in the recipe directory in conda_build_config.yaml.
Uploads to Anaconda Cloud also require an API token to be set to the
BINSTAR_TOKEN environment variable. Documentation for token generation:
https://docs.anaconda.com/anacondaorg/user-guide/tasks/work-with-accounts/#creating-access-tokens
To populate BINSTAR_TOKEN for CI jobs, add the token as a secret, e.g.:
https://docs.github.com/en/actions/reference/encrypted-secrets

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: # This file defines the configuration for building conda packages with CI.
# The actual files for running the CI are created/updated by "conda-smithy".
# You should edit only this file and the recipe files (in recipe_dir, below)
# and not any of the automatically-generated files in e.g. .ci_support,
# .scripts, or .github/workflows/conda-build.yml.

# See https://conda-forge.org/docs/maintainer/conda_forge_yml.html for
# documentation on possible keys and values.

clone_depth: 0
github_actions:
  cancel_in_progress: false
  store_build_artifacts: true
os_version:
  linux_64: cos7
provider:
  linux: github_actions
  osx: github_actions
  win: github_actions
recipe_dir: .conda/recipe
# skip unnecessary files since this is not a full-fledged conda-forge feedstock
skip_render:
  - README.md
  - LICENSE.txt
  - .gitattributes
  - .gitignore
  - build-locally.py
  - LICENSE
test: native_and_emulated
# enable uploads to Anaconda Cloud from specified branches only
# ***** UPDATE THIS FOR MAINTENANCE BRANCHES ********************************
upload_on_branch: main
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with: _npx lint-staged
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{  #!/bin/sh
. "$(dirname "$0")/_/husky.sh"

pnpm pre-commit }} 
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v2
        with: The MIT License (MIT)

Copyright (c) Microsoft Corporation
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
          sarif_file: results.sarif
