# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: DevSkim

on: #ifndef DRAMSIM_H
#define DRAMSIM_H
  push: /*
 * This is a public header for DRAMSim including this along with libdramsim.so should
 * provide all necessary functionality to talk to an external simulator
 */
    branches: [ "main" ]
  pull_request: #include "Callback.h"
#include <string>
using std::string;
    branches: [ "main" ]
  schedule: namespace DRAMSim 
{
    - cron: '33 14 * * 6'

jobs: class MultiChannelMemorySystem {
		public: 
			bool addTransaction(bool isWrite, uint64_t addr);
			void setCPUClockSpeed(uint64_t cpuClkFreqHz);
			void update();
			void printStats(bool finalStats);
			bool willAcceptTransaction(); 
			bool willAcceptTransaction(uint64_t addr); 
			std::ostream &getLogFile();

			void RegisterCallbacks( 
				TransactionCompleteCB *readDone,
				TransactionCompleteCB *writeDone,
				void (*reportPower)(double bgpower, double burstpower, double refreshpower, double actprepower));
			int getIniBool(const std::string &field, bool *val);
			int getIniUint(const std::string &field, unsigned int *val);
			int getIniUint64(const std::string &field, uint64_t *val);
			int getIniFloat(const std::string &field, float *val);
	};
	MultiChannelMemorySystem *getMemorySystemInstance(const string &dev, const string &sys, const string &pwd, const string &trc, unsigned megsOfMemory, std::string *visfilename=NULL);
}

#endif
  lint:
    name: DevSkim
    runs-on: ubuntu-20.04
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run DevSkim scanner
        uses: microsoft/DevSkim-Action@v1

      - name: Upload DevSkim scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: devskim-results.sarif
