# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
# Reference: https://github.com/microsoft/vscode/wiki/How-to-Contribute
properties: import React from 'react';
import Header from './Header';
import Container from './Container';
import Ribbon from './Ribbon';
import '../style/App.css';
  resources: const App = () => {
  return (
    <div>
      <Header />
      <Container />
      <Ribbon />
    </div>
  );
};
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives: export default App;
        description: Install Git
        allowPrerelease: true
      settings: // @flow
import React from 'react';
import List from './List';
import Message from './Message';
import emitter from '../emitter';
import { getApiUrl } from '../utils';
import type { HeaderState, ContainerState } from '../type';
        id: Git.Git
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: npm
      directives: class Container extends React.PureComponent<{}, ContainerState> {
  state: ContainerState = {
    status: 'init',
    data: {}
  };
        description: Install NodeJS version >=18.15.x and <19
        allowPrerelease: true
      settings:  async getSearchResult(headerState: HeaderState) {
    try {
      this.setState({ status: 'loading' });
      const resp = await fetch(getApiUrl(headerState));
      const json = await resp.json();
      this.setState({
        data: { ...json },
        status: json.resultCount ? '' : 'noContent'
      });
    } catch (e) {
      this.setState({ status: 'error' });
    }
  }
        id: OpenJS.NodeJS.LTS
        version: "18.18.0"
        source: winget
    - resource: NpmDsc/NpmPackage
      id: yarn
      dependsOn:  componentDidMount() {
    emitter.on('search', this.getSearchResult.bind(this));
  }
        - npm
      directives:  componentWillUnmount() {
    emitter.removeListener('search');
  }
        description: Install Yarn
        allowPrerelease: true
      settings:  render() {
    const { status, data } = this.state;
    return (
      <div>
        {status.length ? <Message status={status} /> : <List {...data} />}
      </div>
    );
  }
}
        Name: 'yarn'
        Global: true
        PackageDirectory: 'export default Container;\..\'
    - resource: /* global $ */
// @flow
/* eslint-disable jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events */
      directives: import React from 'react';
import emitter from '../emitter';
import type { HeaderState, SearchOption } from '../type';
import '../style/Header.css';
        description: Install Python 3.10
        allowPrerelease: true
      settings: const options: Array<SearchOption> = [
  'All',
  'Audiobook',
  'eBook',
  'Movie',
  'Music',
  'Music Video',
  'Podcast',
  'TV Show',
  'Software'
];
        id: Python.Python.3.10
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: vsPackage
      directives: class Header extends React.PureComponent<{}, HeaderState> {
  emitSearch: () => void;
  _onKeyUp: (e: Object) => void;
  _onClick: (e: Object) => void;
  _update: (e: Object) => Function;
  ticking: boolean;
  rAf: any;
        description: Install Visual Studio 2022 (any edition is OK)
        allowPrerelease: true
      settings:  state: HeaderState = {
    media: 'All',
    query: ''
  };
        id: Microsoft.VisualStudio.2022.BuildTools
        source: winget
    - resource: Microsoft.VisualStudio.DSC/VSComponents
      dependsOn:  constructor(props: Object) {
    super(props);
    this.ticking = false;
    this.rAf = null;
    this.emitSearch = () => emitter.emit('search', this.state);
    this._onClick = e => this.setState(
      { media: e.target.textContent },
      () => (this.state.query.length ? this.emitSearch() : null)
    );
    this._update = ({ keyCode, target: { value: query } }) => _ => {
      this.setState({ query }, () => keyCode === 13 && this.emitSearch());
      this.ticking = false;
    };
    this._onKeyUp = e => {
      if (!this.ticking) {
        this.rAf = window.requestAnimationFrame(this._update(e));
        this.ticking = true;
      }
    };
  }
        - vsPackage
      directives:  renderSearchOption = () => options.map(opt =>
    <li
      key={opt}
      className={this.state.media === opt ? 'select' : ''}
    >
      <a
        tabIndex="0"
        role="button"
        onClick={this._onClick}
      >
        {opt}
      </a>
    </li>);
        description: Install required VS workloads
        allowPrerelease: true
      settings:  componentWillUnmount() {
    window.cancelAnimationFrame(this.rAf);
  }
        productId: Microsoft.VisualStudio.Product.BuildTools
        channelId: VisualStudio.17.Release
        includeRecommended: true
        components:  render() {
    return (
      <div className="navbar-fixed">
        <nav>
          <div className="nav-wrapper cyan">
            <div className="header-search-wrapper">
              <i className="material-icons black-text">search</i>
              <input
                type="text"
                placeholder="Search"
                onKeyUp={this._onKeyUp}
                className="search-input white black-text"
              />
            </div>
            <div className="dropdown-wrapper">
              <div
                className="dropdown-button"
                role="button"
                data-activates="search-options"
              >
                {this.state.media}
              </div>
              <ul id="search-options" className="dropdown-content">
                {this.renderSearchOption()}
              </ul>
            </div>
          </div>
        </nav>
      </div>
    );
  }
}
          - Microsoft.VisualStudio.Workload.VCTools
    - resource: YarnDsc/YarnInstall
      dependsOn: export default Header;
        - npm
      directives: // @flow
import React, { PropTypes } from 'react';
import { getKind, kindColorMap } from '../utils';
import type { SearchResult } from '../type';
import '../style/Item.css';
        description: Install dependencies
        allowPrerelease: true
      settings: const Item = (props: SearchResult) => (
  <div className="card-wrapper">
    <div className="card">
      <div className="card-image waves-effect waves-block waves-light">
        PackageDirectory: '         <img
          alt="img"
          className="activator"
          src={props.artworkUrl100.replace('100x100', '1200x1200')}
        />
      </div>
      <div className="card-content">
        <span className="card-title activator grey-text text-darken-4">{props.trackName || props.collectionName}<i className="material-icons right">more_vert</i></span>
        <p>
          <a target="_blank" href={props.trackViewUrl || props.collectionViewUrl}>
            more
          </a>
          {
            getKind(props.kind).length ?
              <p className={`right kind white-text ${props.kind in kindColorMap ? `${kindColorMap[props.kind]}` : 'black'}`}>
                {getKind(props.kind)}
              </p> : null
          }
        </p>
      </div>
      <div className="card-reveal">
        <span className="card-title grey-text text-darken-4">{props.trackName || props.collectionName}<i className="material-icons right">close</i></span>
        <p>{props.longDescription || props.description || 'No description.'}</p>
      </div>
    </div>
  </div>
); }\..\'
  configurationVersion: 0.2.0
