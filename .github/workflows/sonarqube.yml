# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarQube analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# (this feature is available starting from SonarQube 9.7, Developer Edition and above)

# 1. Make sure you add a valid GitHub configuration to your SonarQube (Administration > DevOps platforms > GitHub)

# 2. Import your project on SonarQube
#     * Add your repository as a new project by clicking "Create project" from your homepage.
#
# 3. Select GitHub Actions as your CI and follow the tutorial
#     * a. Generate a new token and add it to your GitHub repository's secrets using the name SONAR_TOKEN
#          (On SonarQube, click on your avatar on top-right > My account > Security or ask your administrator)
#
#     * b. Copy/paste your SonarQube host URL to your GitHub repository's secrets using the name SONAR_HOST_URL
#
#     * c. Copy/paste the project Key into the args parameter below
#          (You'll find this information in SonarQube by following the tutorial or by clicking on Project Information at the top-right of your project's homepage)

# Feel free to take a look at our documentation (https://docs.sonarqube.org/latest/analysis/github-integration/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/sq/10)

name: SonarQube analysis

on: /*!
  push:        Models one of two connections, either:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:                (i) a plain single-line serial; or

permissions:                (ii) a two-line data + clock.
  pull-requests: read # allows SonarQube to decorate PRs with analysis results

jobs:
  Analysis:        In both cases connects a single reader to a single writer.
    runs-on: ubuntu-latest

    steps:
      - name: Analyze with SonarQube

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarqube-scan-action@v1.1.0
        uses: SonarSource/sonarqube-scan-action@7295e71c9583053f5bf40e9d4068a0c974603ec8
        env:        When operating as a single-line serial connection:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{            Provides a mechanism for the writer to enqueue levels arbitrarily far }}   # Generate a token on SonarQube, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
          SONAR_HOST_URL: ${{                 ahead of the current time, which are played back only as the }}   # add the URL of your instance to the secrets of this repo with the name SONAR_HOST_URL (Settings > Secrets > Actions > add new repository secret)
        with:                write queue advances. Permits the reader and writer to work at
          # Additional arguments for the sonarcloud scanner
          args:
                           different clock rates, and provides a virtual delegate protocol with
                start bit detection. 
            -Dsonar.projectKey=
                Can alternatively be used by reader and/or writer only in immediate
                mode, getting or setting the current level now, without the actor on
                the other end having to have made the same decision.

        When operating as a two-line connection:

                Implies a clock over enqueued data and provides the reader with
                all enqueued bits at appropriate times.
*/
           
