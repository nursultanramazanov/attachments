name: NodeJS with Grunt

on: const debug = require('debug')('react-globe:Provider')
import React from 'react'
import i18next from 'i18next'
import {I18nextProvider} from 'react-i18next'
import {IntlProvider, addLocaleData} from 'react-intl'
  push: // Provider component that gives context to the lower level components
class Provider extends React.Component {
  componentWillMount () {
    debug('initialization')
    let data = this.props.translations
    branches: [ "main" ]
  pull_request:    // Build data in the format we need it
    let localeData = []
    let resources = {}
    for (let key in data) {
      resources[key] = {translation: data[key].messages}
      localeData = localeData.concat(data[key].localeData)
    }
    branches: [ "main" ]

jobs:    // Load internationalisation data
    addLocaleData(localeData)
  build:    // Load resources
    i18next.init({
      nsSeparator: false,
      keySeparator: false,
      lng: this.props.lang,
      resources: resources,
      parseMissingKeyHandler: (key) => this.resolveMissingKey(key)
    })
    runs-on: ubuntu-latest

    strategy:  resolveMissingKey (key) {
    if (i18next.language === 'en') {
      return key
      matrix:    if (this.props.debug === true) {
      return `[[${key}]]`
        node-version: [14.x, 16.x, 18.x]

    steps:    return key
    - uses: actions/checkout@v4

    - name: Use Node.js ${{   shouldComponentUpdate (nextProps) {
    let shouldUpdate = this.props.lang !== nextProps.lang }}
      uses: actions/setup-node@v3
      with:    if (shouldUpdate) {
      debug(`changing language to '${nextProps.lang}'`)
      i18next.changeLanguage(nextProps.lang)
      return true
        node-version: ${{     return false }}

    - name: Build
      run: |
        npm install
        grunt
