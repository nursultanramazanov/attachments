# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on: }
  push: 
    branches: [ "main" ]
  workflow_dispatch:         // each burst will contain JEDEC_DATA_BUS_BITS/8 bytes of data, so the bottom bits (3 bits for a single channel DDR system) are

env:         //         thrown away before mapping the other bits
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '14.x'                # set this to the node version to use

permissions:         physicalAddress >>= byteOffsetWidth;
  contents: read

jobs: 
  build:         // The next thing we have to consider is that when a request is made for a
    runs-on: ubuntu-latest
    steps:         // we've taken into account the granulaity of a single burst by shifting 
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:         // off the bottom 3 bits, but a transaction has to take into account the
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |         // burst length (i.e. the requests will be aligned to cache line sizes which
        npm install         // should be equal to transactionSize above). 
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:         //
        name: node-app
        path: .        // Since the column address increments internally on bursts, the bottom n 

  deploy:         // bits of the column (colLow) have to be zero in order to account for the 
    permissions:         // total size of the transaction. These n bits should be shifted off the 
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:         // address and also subtracted from the total column width. 
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:         // I am having a hard time explaining the reasoning here, but it comes down
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:         // this: for a 64 byte transaction, the bottom 6 bits of the address must be 
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:         // zero. These zero bits must be made up of the byte offset (3 bits) and also
        app-name:         // from the bottom bits of the column 
        publish-profile:         // 
        package:         // For example: cowLowBits = log2(64bytes) - 3 bits = 3 bits 
