# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:                /*!
  push:                        Sets a read delegate.
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:                        Single line serial connection:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:                                The delegate will receive samples of the output level every
  Analysis:                                @c bit_lengths of a second apart subject to a state machine:
    runs-on: ubuntu-latest

    steps:
      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        env:                                        * initially no bits will be delivered;
          GITHUB_TOKEN: ${{                                         * when a zero level is first detected, the line will wait half a bit's length, then start }}  # Needed to get PR information
          SONAR_TOKEN: ${{                                         sampling at single-bit intervals, passing each bit to the delegate while it returns @c true; }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
                                                  * as soon as the delegate returns @c false, the line will return to the initial state.
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=
            -Dsonar.organization=
                                    Two-line clock + data connection:

                                The delegate will receive every bit that has been enqueued, spaced as nominated
                                by the writer. @c bit_length is ignored, as is the return result of
                                @c ReadDelegate::serial_line_did_produce_bit.
                */
