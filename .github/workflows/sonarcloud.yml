# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on: //BusPacket.cpp
//
//Class file for bus packet object
//

#include "BusPacket.h"

using namespace DRAMSim;
using namespace std;
  push: BusPacket::BusPacket(BusPacketType packtype, uint64_t physicalAddr, 
                unsigned col, unsigned rw, unsigned r, unsigned b, void *dat, 
                ostream &dramsim_log_) :
        dramsim_log(dramsim_log_),
        busPacketType(packtype),
        column(col),
        row(rw),
        bank(b),
        rank(r),
        physicalAddress(physicalAddr),
        data(dat)
{}
    branches: [ "main" ]
  pull_request :void BusPacket::print(uint64_t currentClockCycle, bool dataStart)
{
        if (this == NULL)
        {
                return;
        }

        if (VERIFICATION_OUTPUT)
        {
                switch (busPacketType)
                {
                case READ:
                        cmd_verify_out << currentClockCycle << ": read ("<<rank<<","<<bank<<","<<column<<",0);"<<endl;
                        break;
                case READ_P:
                        cmd_verify_out << currentClockCycle << ": read ("<<rank<<","<<bank<<","<<column<<",1);"<<endl;
                        break;
                case WRITE:
                        cmd_verify_out << currentClockCycle << ": write ("<<rank<<","<<bank<<","<<column<<",0 , 0, 'h0);"<<endl;
                        break;
                case WRITE_P:
                        cmd_verify_out << currentClockCycle << ": write ("<<rank<<","<<bank<<","<<column<<",1, 0, 'h0);"<<endl;
                        break;
                case ACTIVATE:
                        cmd_verify_out << currentClockCycle <<": activate (" << rank << "," << bank << "," << row <<");"<<endl;
                        break;
                case PRECHARGE:
                        cmd_verify_out << currentClockCycle <<": precharge (" << rank << "," << bank << "," << row <<");"<<endl;
                        break;
                case REFRESH:
                        cmd_verify_out << currentClockCycle <<": refresh (" << rank << ");"<<endl;
                        break;
                case DATA:
                        //TODO: data verification?
                        break;
                default:
                        ERROR("Trying to print unknown kind of bus packet");
                        exit(-1);
                }
        }
}
    branches: [ "main" ]
  workflow_dispatch: void BusPacket::print()
{
        if (this == NULL) //pointer use makes this a necessary precaution
        {
                return;
        }
        else
        {
                switch (busPacketType)
                {
                case READ:
                        PRINT("BP [READ] pa[0x"<<hex<<physicalAddress<<dec<<"] r["<<rank<<"] b["<<bank<<"] row["<<row<<"] col["<<column<<"]");
                        break;
                case READ_P:
                        PRINT("BP [READ_P] pa[0x"<<hex<<physicalAddress<<dec<<"] r["<<rank<<"] b["<<bank<<"] row["<<row<<"] col["<<column<<"]");
                        break;
                case WRITE:
                        PRINT("BP [WRITE] pa[0x"<<hex<<physicalAddress<<dec<<"] r["<<rank<<"] b["<<bank<<"] row["<<row<<"] col["<<column<<"]");
                        break;
                case WRITE_P:
                        PRINT("BP [WRITE_P] pa[0x"<<hex<<physicalAddress<<dec<<"] r["<<rank<<"] b["<<bank<<"] row["<<row<<"] col["<<column<<"]");
                        break;
                case ACTIVATE:
                        PRINT("BP [ACT] pa[0x"<<hex<<physicalAddress<<dec<<"] r["<<rank<<"] b["<<bank<<"] row["<<row<<"] col["<<column<<"]");
                        break;
                case PRECHARGE:
                        PRINT("BP [PRE] pa[0x"<<hex<<physicalAddress<<dec<<"] r["<<rank<<"] b["<<bank<<"] row["<<row<<"] col["<<column<<"]");
                        break;
                case REFRESH:
                        PRINT("BP [REF] pa[0x"<<hex<<physicalAddress<<dec<<"] r["<<rank<<"] b["<<bank<<"] row["<<row<<"] col["<<column<<"]");
                        break;
                case DATA:
                        PRINTN("BP [DATA] pa[0x"<<hex<<physicalAddress<<dec<<"] r["<<rank<<"] b["<<bank<<"] row["<<row<<"] col["<<column<<"] data["<<data<<"]=");
                        printData();
                        PRINT("");
                        break;
                default:
                        ERROR("Trying to print unknown kind of bus packet");
                        exit(-1);
                }
        }
}

permissions: void BusPacket::printData() const 
{
        if (data == NULL)
        {
                PRINTN("NO DATA");
                return;
        }
        PRINTN("'" << hex);
        for (int i=0; i < 4; i++)
        {
                PRINTN(((uint64_t *)data)[i]);
        }
        PRINTN("'" << dec);
}
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs: #ifndef BUSPACKET_H
#define BUSPACKET_H
  Analysis: //BusPacket.h
//
//Header file for bus packet object
//

    runs-on: ubuntu-latest

    steps: #include "SystemConfiguration.h"
      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        env: namespace DRAMSim
{
enum BusPacketType
{
        READ,
        READ_P,
        WRITE,
        WRITE_P,
        ACTIVATE,
        PRECHARGE,
        REFRESH,
        DATA
};
          GITHUB_TOKEN: ${{ class BusPacket }}  # Needed to get PR information
          SONAR_TOKEN: ${{         BusPacket();
        ostream &dramsim_log; 
        //Fields
        BusPacketType busPacketType;
        unsigned column;
        unsigned row;
        unsigned bank;
        unsigned rank;
        uint64_t physicalAddress;
        void *data; }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:         //Functions
        BusPacket(BusPacketType packtype, uint64_t physicalAddr, unsigned col, unsigned rw, unsigned r, unsigned b, void *dat, ostream &dramsim_log_);         
             
    
        
          # Additional arguments for the sonarcloud scanner
          args:         void print();
        void print(uint64_t currentClockCycle, bool dataStart);
        void printData() const;
        
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            - };
            - }
            #endif
            
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # When you need the analysis to take place in a directory other than the one from which it was launched
            #-Dsonar.projectBaseDir= # optional, default is .
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false
