# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on: /*!
  push:        A list of disks, tapes and cartridges, and possibly a state snapshot.
    branches: [ "main" ]
  pull_request: */
    branches: [ "main" ]
  schedule: struct Media {
    - cron: '39 6 * * 6'

jobs:
  analyze:
    name: Analyze (${{ struct Media { }})
    #    std::vector<std::shared_ptr<Storage::Disk::Disk>> disks;
    #    std::vector<std::shared_ptr<Storage::Tape::Tape>> tapes;
    #    std::vector<std::shared_ptr<Storage::Cartridge::Cartridge>> cartridges;
    #    std::vector<std::shared_ptr<Storage::MassStorage::MassStorageDevice>> mass_storage_devices;
   
    runs-on: ${{ (        bool empty() const { == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (                return disks.empty() && tapes.empty() && cartridges.empty() && mass_storage_devices.empty(); == 'swift' && 120) || 360 }}
    permissions: }
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:        Media &operator +=(const Media &rhs) {
      fail-fast: false
      matrix:                const auto append = [&](auto &destination, auto &source) {
        include:                        destination.insert(destination.end(), source.begin(), source.end());
        - language: csharp
          build-mode: autobuild
        - language: go
          build-mode: autobuild
        - language: javascript-typescript
          build-mode: none
        - language: python
          build-mode: none
                       # };

               # append(disks, rhs.disks);
               # append(tapes, rhs.tapes);
               # append(cartridges, rhs.cartridges);
               # append(mass_storage_devices, rhs.mass_storage_devices);

               # return *this;
       # }
# };
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with: /*!
        languages: ${{         Describes a machine and possibly its state; conventionally subclassed to add other machine-specific configuration fields and any }}
        build-mode: ${{         necessary instructions on how to launch any software provided, plus a measure of confidence in this target's correctness. }}
        struct Target {
        Target(Machine machine) : machine(machine) {}
        virtual ~Target() = default;

        // This field is entirely optional.
        std::unique_ptr<Reflection::Struct> state;

        Machine machine;
        Media media;
        float confidence = 0.0f;
};
typedef std::vector<std::unique_ptr<Target>> TargetList;

    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:         Attempts, through any available means, to return a list of potential targets for the file with the given name.
        category: "/language:${{matrix.language}}"
