name: Ruby Gem

on: module AttachmentHelpers
  def fixture_path(filename)
    File.expand_path("#{PROJECT_ROOT}/spec/support/fixtures/#{filename}")
  end

  def attachment_path(filename)
    File.expand_path("public/system/attachments/#{filename}")
  end
end
World(AttachmentHelpers)

When /^I modify my attachment definition to:$/ do |definition|
  content = cd(".") { File.read("app/models/user.rb") }
  name = content[/has_attached_file :\w+/][/:\w+/]
  content.gsub!(/has_attached_file.+end/m, <<-FILE)
      #{definition}
      do_not_validate_attachment_file_type #{name}
    end
  FILE

  write_file "app/models/user.rb", content
  cd(".") { FileUtils.rm_rf ".rbx" }
end

When /^I upload the fixture "([^"]*)"$/ do |filename|
  run_simple %(bundle exec rails runner "User.create!(:attachment => File.open('#{fixture_path(filename)}'))")
end

Then /^the attachment "([^"]*)" should have a dimension of (\d+x\d+)$/ do |filename, dimension|
  cd(".") do
    geometry = `identify -format "%wx%h" "#{attachment_path(filename)}"`.strip
    expect(geometry).to eq(dimension)
  end
end

Then /^the attachment "([^"]*)" should exist$/ do |filename|
  cd(".") do
    expect(File.exist?(attachment_path(filename))).to be true
  end
end

When /^I swap the attachment "([^"]*)" with the fixture "([^"]*)"$/ do |attachment_filename, fixture_filename|
  cd(".") do
    require 'fileutils'
    FileUtils.rm_f attachment_path(attachment_filename)
    FileUtils.cp fixture_path(fixture_filename), attachment_path(attachment_filename)
  end
end

Then /^the attachment should have the same content type as the fixture "([^"]*)"$/ do |filename|
  cd(".") do
    begin
      # Use mime/types/columnar if available, for reduced memory usage
      require "mime/types/columnar"
    rescue LoadError
      require "mime/types"
    end

    attachment_content_type = `bundle exec rails runner "puts User.last.attachment_content_type"`.strip
    expected = MIME::Types.type_for(filename).first.content_type
    expect(attachment_content_type).to eq(expected)
  end
end

Then /^the attachment should have the same file name as the fixture "([^"]*)"$/ do |filename|
  cd(".") do
    attachment_file_name = `bundle exec rails runner "puts User.last.attachment_file_name"`.strip
    expect(attachment_file_name).to eq(File.name(fixture_path(filename)).to_s)
  end
end

Then /^the attachment should have the same file size as the fixture "([^"]*)"$/ do |filename|
  cd(".") do
    attachment_file_size = `bundle exec rails runner "puts User.last.attachment_file_size"`.strip
    expect(attachment_file_size).to eq(File.size(fixture_path(filename)).to_s)
  end
end

Then /^the attachment file "([^"]*)" should (not )?exist$/ do |filename, not_exist|
  cd(".") do
    expect(attachment_path(filename)).not_to be_an_existing_file
  end
end

Then /^I should have attachment columns for "([^"]*)"$/ do |attachment_name|
  cd(".") do
    columns = eval(`bundle exec rails runner "puts User.columns.map{ |column| [column.name, column.sql_type] }.inspect"`.strip)
    expect_columns = [
      ["#{attachment_name}_file_name", "varchar"],
      ["#{attachment_name}_content_type", "varchar"],
      ["#{attachment_name}_file_size", "bigint"],
      ["#{attachment_name}_updated_at", "datetime"]
    ]
    expect(columns).to include(*expect_columns)
  end
end

Then /^I should not have attachment columns for "([^"]*)"$/ do |attachment_name|
  cd(".") do
    columns = eval(`bundle exec rails runner "puts User.columns.map{ |column| [column.name, column.sql_type] }.inspect"`.strip)
    expect_columns = [
      ["#{attachment_name}_file_name", "varchar"],
      ["#{attachment_name}_content_type", "varchar"],
      ["#{attachment_name}_file_size", "bigint"],
      ["#{attachment_name}_updated_at", "datetime"]
    ]

    expect(columns).not_to include(*expect_columns)
  end
end
  push: Then %r{I should see an image with a path of "([^"]*)"} do |path|
  expect(page).to have_css("img[src^='#{path}']")
end

Then %r{^the file at "([^"]*)" is the same as "([^"]*)"$} do |web_file, path|
  expected = IO.read(path)
  actual = if web_file.match %r{^https?://}
    Net::HTTP.get(URI.parse(web_file))
  else
    visit(web_file)
    page.body
  end
  actual.force_encoding("UTF-8") if actual.respond_to?(:force_encoding)
  expect(actual).to eq(expected)
end
    branches: [ "main" ]
  pull_request: Given /^I generate a new rails application$/ do
  steps %{
    When I successfully run `rails new #{APP_NAME} --skip-bundle`
    And I cd to "#{APP_NAME}"
  }

  FileUtils.chdir("tmp/aruba/testapp/")

  steps %{
    And I turn off class caching
    And I write to "Gemfile" with:
      """
      source "http://rubygems.org"
      gem "rails", "#{framework_version}"
      gem "sqlite3", :platform => [:ruby, :rbx]
      gem "activerecord-jdbcsqlite3-adapter", :platform => :jruby
      gem "jruby-openssl", :platform => :jruby
      gem "capybara"
      gem "gherkin"
      gem "aws-sdk-s3"
      gem "racc", :platform => :rbx
      gem "rubysl", :platform => :rbx
      """
    And I remove turbolinks
    And I comment out lines that contain "action_mailer" in "config/environments/*.rb"
    And I empty the application.js file
    And I configure the application to use "paperclip" from this project
  }

  FileUtils.chdir("../../..")
end

Given "I allow the attachment to be submitted" do
  cd(".") do
    transform_file("app/controllers/users_controller.rb") do |content|
      content.gsub("params.require(:user).permit(:name)",
                   "params.require(:user).permit!")
    end
  end
end

Given "I remove turbolinks" do
  cd(".") do
    transform_file("app/assets/javascripts/application.js") do |content|
      content.gsub("//= require turbolinks", "")
    end
    transform_file("app/views/layouts/application.html.erb") do |content|
      content.gsub(', "data-turbolinks-track" => true', "")
    end
  end
end

Given /^I comment out lines that contain "([^"]+)" in "([^"]+)"$/ do |contains, glob|
  cd(".") do
    Dir.glob(glob).each do |file|
      transform_file(file) do |content|
        content.gsub(/^(.*?#{contains}.*?)$/) { |line| "# #{line}" }
      end
    end
  end
end

Given /^I attach :attachment$/ do
  attach_attachment("attachment")
end

Given /^I attach :attachment with:$/ do |definition|
  attach_attachment("attachment", definition)
end

def attach_attachment(name, definition = nil)
  snippet = "has_attached_file :#{name}"
  if definition
    snippet += ", \n"
    snippet += definition
  end
  snippet += "\ndo_not_validate_attachment_file_type :#{name}\n"
  cd(".") do
    transform_file("app/models/user.rb") do |content|
      content.sub(/end\Z/, "#{snippet}\nend")
    end
  end
end

Given "I empty the application.js file" do
  cd(".") do
    transform_file("app/assets/javascripts/application.js") do |content|
      ""
    end
  end
end

Given /^I run a rails generator to generate a "([^"]*)" scaffold with "([^"]*)"$/ do |model_name, attributes|
  step %[I successfully run `rails generate scaffold #{model_name} #{attributes}`]
end

Given /^I run a paperclip generator to add a paperclip "([^"]*)" to the "([^"]*)" model$/ do |attachment_name, model_name|
  step %[I successfully run `rails generate paperclip #{model_name} #{attachment_name}`]
end

Given /^I run a migration$/ do
  step %[I successfully run `rake db:migrate --trace`]
end

When /^I rollback a migration$/ do
  step %[I successfully run `rake db:rollback STEPS=1 --trace`]
end

Given /^I update my new user view to include the file upload field$/ do
  steps %{
    Given I overwrite "app/views/users/new.html.erb" with:
      """
      <%= form_for @user, :html => { :multipart => true } do |f| %>
        <%= f.label :name %>
        <%= f.text_field :name %>
        <%= f.label :attachment %>
        <%= f.file_field :attachment %>
        <%= submit_tag "Submit" %>
      <% end %>
      """
  }
end

Given /^I update my user view to include the attachment$/ do
  steps %{
    Given I overwrite "app/views/users/show.html.erb" with:
      """
      <p>Name: <%= @user.name %></p>
      <p>Attachment: <%= image_tag @user.attachment.url %></p>
      """
  }
end

Given /^I add this snippet to the User model:$/ do |snippet|
  file_name = "app/models/user.rb"
  cd(".") do
    content = File.read(file_name)
    File.open(file_name, 'w') { |f| f << content.sub(/end\Z/, "#{snippet}\nend") }
  end
end

Given /^I add this snippet to config\/application.rb:$/ do |snippet|
  file_name = "config/application.rb"
  cd(".") do
    content = File.read(file_name)
    File.open(file_name, 'w') {|f| f << content.sub(/class Application < Rails::Application.*$/, "class Application < Rails::Application\n#{snippet}\n")}
  end
end

Given /^I start the rails application$/ do
  cd(".") do
    require "rails"
    require "./config/environment"
    require "capybara"
    Capybara.app = Rails.application
  end
end

Given /^I reload my application$/ do
  Rails::Application.reload!
end

When /^I turn off class caching$/ do
  cd(".") do
    file = "config/environments/test.rb"
    config = IO.read(file)
    config.gsub!(%r{^\s*config.cache_classes.*$},
                 "config.cache_classes = false")
    File.open(file, "w"){|f| f.write(config) }
  end
end

Then /^the file at "([^"]*)" should be the same as "([^"]*)"$/ do |web_file, path|
  expected = IO.read(path)
  actual = read_from_web(web_file)
  expect(actual).to eq(expected)
end

When /^I configure the application to use "([^\"]+)" from this project$/ do |name|
  append_to_gemfile "gem '#{name}', :path => '#{PROJECT_ROOT}'"
  steps %{And I successfully run `bundle install --local`}
end

When /^I configure the application to use "([^\"]+)"$/ do |gem_name|
  append_to_gemfile "gem '#{gem_name}'"
end

When /^I append gems from Appraisal Gemfile$/ do
  File.read(ENV['BUNDLE_GEMFILE']).split(/\n/).each do |line|
    if line =~ /^gem "(?!rails|appraisal)/
      append_to_gemfile line.strip
    end
  end
end

When /^I comment out the gem "([^"]*)" from the Gemfile$/ do |gemname|
  comment_out_gem_in_gemfile gemname
end

Given(/^I add a "(.*?)" processor in "(.*?)"$/) do |processor, directory|
  filename = "#{directory}/#{processor}.rb"
  cd(".") do
    FileUtils.mkdir_p directory
    File.open(filename, "w") do |f|
      f.write(<<-CLASS)
        module Paperclip
          class #{processor.capitalize} < Processor
            def make
              basename = File.basename(file.path, File.extname(file.path))
              dst_format = options[:format] ? ".\#{options[:format]}" : ''

              dst = Tempfile.new([basename, dst_format])
              dst.binmode

              convert(':src :dst',
                src: File.expand_path(file.path),
                dst: File.expand_path(dst.path)
              )

              dst
            end
          end
        end
      CLASS
    end
  end
end

def transform_file(filename)
  if File.exist?(filename)
    content = File.read(filename)
    File.open(filename, "w") do |f|
      content = yield(content)
      f.write(content)
    end
  end
end
    branches: [ "main" ]

jobs: When /^I attach the file "([^"]*)" to "([^"]*)" on S3$/ do |file_path, field|
  definition = Paperclip::AttachmentRegistry.definitions_for(User)[field.downcase.to_sym]
  path = "https://paperclip.s3.us-west-2.amazonaws.com#{definition[:path]}"
  path.gsub!(':filename', File.basename(file_path))
  path.gsub!(/:([^\/\.]+)/) do |match|
    "([^\/\.]+)"
  end
  FakeWeb.register_uri(:put, Regexp.new(path), :body => "<xml></xml>")
  step "I attach the file \"#{file_path}\" to \"#{field}\""
end

Then /^the file at "([^"]*)" should be uploaded to S3$/ do |url|
  FakeWeb.registered_uri?(:put, url)
end
  build: # TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "selectors"))

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

# Single-line step scoper
When /^(.*) within (.*[^:])$/ do |step, parent|
  with_scope(parent) { When step }
end

# Multi-line step scoper
When /^(.*) within (.*[^:]):$/ do |step, parent, table_or_string|
  with_scope(parent) { When "#{step}:", table_or_string }
end

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )press "([^"]*)"$/ do |button|
  click_button(button)
end

When /^(?:|I )follow "([^"]*)"$/ do |link|
  click_link(link)
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"$/ do |value, field|
  fill_in(field, :with => value)
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select og option
# based on naming conventions.
#
When /^(?:|I )fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end

When /^(?:|I )select "([^"]*)" from "([^"]*)"$/ do |value, field|
  select(value, :from => field)
end

When /^(?:|I )check "([^"]*)"$/ do |field|
  check(field)
end

When /^(?:|I )uncheck "([^"]*)"$/ do |field|
  uncheck(field)
end

When /^(?:|I )choose "([^"]*)"$/ do |field|
  choose(field)
end

When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"$/ do |path, field|
  attach_file(field, File.expand_path(path))
end

Then /^(?:|I )should see "([^"]*)"$/ do |text|
  expect(page).to have_content(text)
end
    name: class Rails::Boot
  def run
    load_initializer

    Rails::Initializer.class_eval do
      def load_gems
        @bundler_loaded ||= Bundler.require :default, Rails.env
      end
    end

    Rails::Initializer.run(:set_load_path)
  end
end

Rails.boot!
    runs-on: source "http://rubygems.org"

gem "rails", "RAILS_VERSION"
gem "rdoc"
gem "sqlite3", "1.3.8"
    permissions: begin
  require "rubygems"
  require "bundler"
rescue LoadError
  raise "Could not load the bundler gem. Install it with `gem install bundler`."
end

if Gem::Version.new(Bundler::VERSION) <= Gem::Version.new("0.9.24")
  raise RuntimeError, "Your bundler version is too old for Rails 2.3." +
   "Run `gem install bundler` to upgrade."
end

begin
  # Set up load paths for all bundled gems
  ENV["BUNDLE_GEMFILE"] = File.expand_path("../../Gemfile", __FILE__)
  Bundler.setup
rescue Bundler::GemNotFound
  raise RuntimeError, "Bundler couldn't find some gems." +
    "Did you run `bundle install`?"
end
      contents: require 'aruba/cucumber'
require 'capybara/cucumber'
require 'rspec/matchers'

$CUCUMBER=1

World(RSpec::Matchers)

Before do
  aruba.config.command_launcher = ENV.fetch("DEBUG", nil) ? :debug : :spawn
  @aruba_timeout_seconds = 120
end
      packages: require 'fake_web'

FakeWeb.allow_net_connect = false

module FakeWeb
  class StubSocket
    def read_timeout=(_ignored)
    end

    def continue_timeout=(_ignored)
    end
  end
end

    steps: module FileHelpers
  def append_to(path, contents)
    cd(".") do
      File.open(path, "a") do |file|
        file.puts
        file.puts contents
      end
    end
  end

  def append_to_gemfile(contents)
    append_to('Gemfile', contents)
  end

  def comment_out_gem_in_gemfile(gemname)
    cd(".") do
      gemfile = File.read("Gemfile")
      gemfile.sub!(/^(\s*)(gem\s*['"]#{gemname})/, "\\1# \\2")
      File.open("Gemfile", 'w'){ |file| file.write(gemfile) }
    end
  end

  def read_from_web(url)
    file = if url.match %r{^https?://}
             Net::HTTP.get(URI.parse(url))
           else
             visit(url)
             page.source
           end
    file.force_encoding("UTF-8") if file.respond_to?(:force_encoding)
  end
end

World(FileHelpers)
    - uses: actions/checkout@v4
    - name: Set up Ruby 2.6
    # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,
    # change this to (see https://github.com/ruby/setup-ruby#versioning):
    # uses: ruby/setup-ruby@v1
      uses: ruby/setup-ruby@55283cc23133118229fd3f97f9336ee23a179fcf # v1.146.0
      with: module NavigationHelpers
  # Maps a name to a path. Used by the
  #
  #   When /^I go to (.+)$/ do |page_name|
  #
  # step definition in web_steps.rb
  #
  def path_to(page_name)
    case page_name

    when /the home\s?page/
      '/'
    when /the new user page/
      '/users/new'
    else
      begin
        page_name =~ /the (.*) page/
        path_components = $1.split(/\s+/)
        self.send(path_components.push('path').join('_').to_sym)
      rescue Object
        raise "Can't find mapping from \"#{page_name}\" to a path.\n" +
          "Now, go and add a mapping in #{__FILE__}"
      end
    end
  end
end

World(NavigationHelpers)
        ruby-version: 2.6.x

    - name: Publish to GPR
      run: |
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        printf -- "---\n:github: PROJECT_ROOT     = File.expand_path(File.join(File.dirname(__FILE__), '..', '..')).freeze
APP_NAME         = 'testapp'.freeze
BUNDLE_ENV_VARS = %w(RUBYOPT BUNDLE_PATH BUNDLE_BIN_PATH BUNDLE_GEMFILE)
ORIGINAL_BUNDLE_VARS = Hash[ENV.select{ |key,value| BUNDLE_ENV_VARS.include?(key) }]

ENV['RAILS_ENV'] = 'test'

Before do
  gemfile = ENV['BUNDLE_GEMFILE'].to_s
  ENV['BUNDLE_GEMFILE'] = File.join(Dir.pwd, gemfile) unless gemfile.start_with?(Dir.pwd)
  @framework_version = nil
end

After do
  ORIGINAL_BUNDLE_VARS.each_pair do |key, value|
    ENV[key] = value
  end
end

When /^I reset Bundler environment variable$/ do
  BUNDLE_ENV_VARS.each do |key|
    ENV[key] = nil
  end
end

module RailsCommandHelpers
  def framework_version?(version_string)
    framework_version =~ /^#{version_string}/
  end

  def framework_version
    @framework_version ||= `rails -v`[/^Rails (.+)$/, 1]
  end

  def framework_major_version
    framework_version.split(".").first.to_i
  end
end
World(RailsCommandHelpers) " > $HOME/.gem/credentials
        gem build *.gemspec
        gem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem
      env: module HtmlSelectorsHelpers
  # Maps a name to a selector. Used primarily by the
  #
  #   When /^(.+) within (.+)$/ do |step, scope|
  #
  # step definitions in web_steps.rb
  #
  def selector_for(locator)
    case locator
    when "the page"
      "html > body"
    else
      raise "Can't find mapping from \"#{locator}\" to a selector.\n" +
        "Now, go and add a mapping in #{__FILE__}"
    end
  end
end

World(HtmlSelectorsHelpers)
        GEM_HOST_API_KEY: "Bearer Feature: Rails integration

  Background:
    Given I generate a new rails application
    And I run a rails generator to generate a "User" scaffold with "name:string"
    And I run a paperclip generator to add a paperclip "attachment" to the "User" model
    And I run a migration
    And I update my new user view to include the file upload field
    And I update my user view to include the attachment
    And I allow the attachment to be submitted

  Scenario: Configure defaults for all attachments through Railtie
    Given I add this snippet to config/application.rb:
      """
      config.paperclip_defaults = {
        :url => "/paperclip/custom/:attachment/:style/:filename",
        :validate_media_type => false
      }
      """
    And I attach :attachment
    And I start the rails application
    When I go to the new user page
    And I fill in "Name" with "something"
    And I attach the file "spec/support/fixtures/animated.unknown" to "Attachment"
    And I press "Submit"
    Then I should see "Name: something"
    And I should see an image with a path of "/paperclip/custom/attachments/original/animated.unknown"
    And the file at "/paperclip/custom/attachments/original/animated.unknown" should be the same as "spec/support/fixtures/animated.unknown"

  Scenario: Add custom processors
    Given I add a "test" processor in "lib/paperclip"
    And I add a "cool" processor in "lib/paperclip_processors"
    And I attach :attachment with:
      """
      styles: { original: {} }, processors: [:test, :cool]
      """
    And I start the rails application
    When I go to the new user page
    And I fill in "Name" with "something"
    And I attach the file "spec/support/fixtures/5k.png" to "Attachment"
    And I press "Submit"
    Then I should see "Name: something"
    And I should see an image with a path of "/paperclip/custom/attachments/original/5k.png"

  Scenario: Filesystem integration test
    Given I attach :attachment with:
      """
        :url => "/system/:attachment/:style/:filename"
      """
    And I start the rails application
    When I go to the new user page
    And I fill in "Name" with "something"
    And I attach the file "spec/support/fixtures/5k.png" to "Attachment"
    And I press "Submit"
    Then I should see "Name: something"
    And I should see an image with a path of "/system/attachments/original/5k.png"
    And the file at "/system/attachments/original/5k.png" should be the same as "spec/support/fixtures/5k.png"

  Scenario: S3 Integration test
    Given I attach :attachment with:
      """
        :storage => :s3,
        :path => "/:attachment/:style/:filename",
        :s3_credentials => Rails.root.join("config/s3.yml"),
        :styles => { :square => "100x100#" }
      """
    And I write to "config/s3.yml" with:
      """
      bucket: paperclip
      access_key_id: access_key
      secret_access_key: secret_key
      s3_region: us-west-2
      """
    And I start the rails application
    When I go to the new user page
    And I fill in "Name" with "something"
    And I attach the file "spec/support/fixtures/5k.png" to "Attachment" on S3
    And I press "Submit"
    Then I should see "Name: something"
    And I should see an image with a path of "//s3.amazonaws.com/paperclip/attachments/original/5k.png"
    And the file at "//s3.amazonaws.com/paperclip/attachments/original/5k.png" should be uploaded to S3 }}"
        OWNER: ${{ Feature: Migration

  Background:
    Given I generate a new rails application
    And I write to "app/models/user.rb" with:
      """
      class User < ActiveRecord::Base; end
      """

  Scenario: Vintage syntax
    When I write to "db/migrate/01_add_attachment_to_users.rb" with:
      """
      class AddAttachmentToUsers < ActiveRecord::Migration
        def self.up
          create_table :users do |t|
            t.has_attached_file :avatar
          end
        end

        def self.down
          drop_attached_file :users, :avatar
        end
      end
      """
    And I run a migration
    Then I should have attachment columns for "avatar"

    When I rollback a migration
    Then I should not have attachment columns for "avatar"

  Scenario: New syntax with create_table
    When I write to "db/migrate/01_add_attachment_to_users.rb" with:
      """
      class AddAttachmentToUsers < ActiveRecord::Migration
        def self.up
          create_table :users do |t|
            t.attachment :avatar
          end
        end
      end
      """
    And I run a migration
    Then I should have attachment columns for "avatar"

  Scenario: New syntax outside of create_table
    When I write to "db/migrate/01_create_users.rb" with:
      """
      class CreateUsers < ActiveRecord::Migration
        def self.up
          create_table :users
        end
      end
      """
    And I write to "db/migrate/02_add_attachment_to_users.rb" with:
      """
      class AddAttachmentToUsers < ActiveRecord::Migration
        def self.up
          add_attachment :users, :avatar
        end

        def self.down
          remove_attachment :users, :avatar
        end
      end
      """
    And I run a migration
    Then I should have attachment columns for "avatar"

    When I rollback a migration
    Then I should not have attachment columns for "avatar" }}

    - name: Publish to RubyGems
      run: |
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        printf -- "---\n:rubygems_api_key: Feature: Rake tasks

  Background:
    Given I generate a new rails application
    And I run a rails generator to generate a "User" scaffold with "name:string"
    And I run a paperclip generator to add a paperclip "attachment" to the "User" model
    And I run a migration
    And I attach :attachment with:
      """
        :path => ":rails_root/public/system/:attachment/:style/:filename"
      """

  Scenario: Paperclip refresh thumbnails task
    When I modify my attachment definition to:
      """
      has_attached_file :attachment, :path => ":rails_root/public/system/:attachment/:style/:filename",
                                     :styles => { :medium => "200x200#" }
      """
    And I upload the fixture "5k.png"
    Then the attachment "medium/5k.png" should have a dimension of 200x200
    When I modify my attachment definition to:
      """
      has_attached_file :attachment, :path => ":rails_root/public/system/:attachment/:style/:filename",
                                     :styles => { :medium => "100x100#" }
      """
    When I successfully run `bundle exec rake paperclip:refresh:thumbnails CLASS=User --trace`
    Then the attachment "original/5k.png" should exist
    And the attachment "medium/5k.png" should have a dimension of 100x100

  Scenario: Paperclip refresh metadata task
    When I upload the fixture "5k.png"
    And I swap the attachment "original/5k.png" with the fixture "12k.png"
    And I successfully run `bundle exec rake paperclip:refresh:metadata CLASS=User --trace`
    Then the attachment should have the same content type as the fixture "12k.png"
    And the attachment should have the same file size as the fixture "12k.png"

  Scenario: Paperclip refresh missing styles task
    When I upload the fixture "5k.png"
    Then the attachment file "original/5k.png" should exist
    And the attachment file "medium/5k.png" should not exist
    When I modify my attachment definition to:
      """
      has_attached_file :attachment, :path => ":rails_root/public/system/:attachment/:style/:filename",
                                     :styles => { :medium => "200x200#" }
      """
    When I successfully run `bundle exec rake paperclip:refresh:missing_styles --trace`
    Then the attachment file "original/5k.png" should exist
    And the attachment file "medium/5k.png" should exist

  Scenario: Paperclip clean task
    When I upload the fixture "5k.png"
    And I upload the fixture "12k.png"
    Then the attachment file "original/5k.png" should exist
    And the attachment file "original/12k.png" should exist
    When I modify my attachment definition to:
      """
      has_attached_file :attachment, :path => ":rails_root/public/system/:attachment/:style/:filename"
      validates_attachment_size :attachment, :less_than => 10.kilobytes
      """
    And I successfully run `bundle exec rake paperclip:clean CLASS=User --trace`
    Then the attachment file "original/5k.png" should exist
    But the attachment file "original/12k.png" should not exist " > $HOME/.gem/credentials
        gem build *.gemspec
        gem push *.gem
      env: # This file was generated by Appraisal

source "https://rubygems.org"

gem "sqlite3", "~> 1.3.8", :platforms => :ruby
gem "pry"
gem "rails", "~> 4.2.0"

group :development, :test do
  gem "activerecord-import"
  gem "mime-types"
  gem "builder"
  gem "rubocop", :require => false
  gem "rspec"
end

gemspec :path => "../"
        GEM_HOST_API_KEY: # This file was generated by Appraisal

source "https://rubygems.org"

gem "sqlite3", "~> 1.3.8", :platforms => :ruby
gem "pry"
gem "rails", "~> 5.0.0"

group :development, :test do
  gem "activerecord-import"
  gem "mime-types"
  gem "builder"
  gem "rubocop", :require => false
  gem "rspec"
end

gemspec :path => "../" " }}"
