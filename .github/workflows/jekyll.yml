# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on: cmake_minimum_required(VERSION 2.8)
  # Runs on pushes targeting the default branch
  push: project(uavcan C CXX)
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch: #
# Build options
#
if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    set(DEFAULT_UAVCAN_PLATFORM "linux")
endif()


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions: # options are listed in a table format below
set(opts
    # name: type: default value: string options list : description
    "CMAKE_BUILD_TYPE:STRING:RelWithDebInfo:Debug Release RelWithDebInfo MinSizeRel:Build type."
    "CMAKE_CXX_FLAGS:STRING:::C++ flags."
    "CMAKE_C_FLAGS:STRING:::C flags."
    "UAVCAN_USE_CPP03:BOOL:OFF::Use C++03 standard."
    "UAVCAN_PLATFORM:STRING:generic:generic linux stm32:Platform."
    "CONTINUOUS_INTEGRATION_BUILD:BOOL:OFF::Disable error redirection and timing tests"
    "UAVCAN_CMAKE_VERBOSE:BOOL:OFF::Verbose CMake configure output"
    )
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency: foreach(_opt ${opts})
    # arguments are : delimited
    string(REPLACE ":" ";" _opt ${_opt})
    list(GET _opt 0 _name)
    list(GET _opt 1 _type)
    list(GET _opt 2 _default)
    list(GET _opt 3 _options)
    list(GET _opt 4 _descr)
    # options are space delimited
    string(REPLACE " " ";" _options "${_options}")
    # if a default has not already been defined, use default from table
    if(NOT DEFINED DEFAULT_${_name})
        set(DEFAULT_${_name} ${_default})
    endif()
    # option has not been set already or it is empty, set it with the default
    if(NOT DEFINED ${_name} OR ${_name} STREQUAL "")
        set(${_name} ${DEFAULT_${_name}})
    endif()
    # create a cache from the variable and force it to set
if(UAVCAN_CMAKE_VERBOSE)
    message(STATUS "${_name}\t: ${${_name}} : ${_descr}")
endif()
    set("${_name}" "${${_name}}" CACHE "${_type}" "${_descr}" FORCE)
    # if an options list is provided for the cache, set it
    if("${_type}" STREQUAL "STRING" AND NOT "${_options}" STREQUAL "")
        set_property(CACHE ${_name} PROPERTY STRINGS ${_options})
    endif()
endforeach()
  group: "pages"
  cancel-in-progress: false

jobs: #
# Set flags
#
include_directories(
    ./libuavcan/include/
    ./libuavcan/include/dsdlc_generated
    )
  # Build job
  build: #
# Install
#
# DSDL definitions
install(DIRECTORY dsdl DESTINATION share/uavcan)
    runs-on: ubuntu-latest
    steps: #
# Subdirectories
#
# library
add_subdirectory(libuavcan)
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@8575951200e472d5f2d95c625da0c7bec8217c42 # v1.161.0
        with: # drivers
if (${UAVCAN_PLATFORM} STREQUAL "linux")
    message(STATUS "Adding UAVCAN Linux platform driver")
    add_subdirectory(libuavcan_drivers/posix)
    add_subdirectory(libuavcan_drivers/linux)
elseif(${UAVCAN_PLATFORM} STREQUAL "stm32")
    message(STATUS "Adding UAVCAN STM32 platform driver")
    add_subdirectory(libuavcan_drivers/posix)
    add_subdirectory(libuavcan_drivers/stm32/driver)
endif()
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ # vim: set et ft=cmake fenc=utf-8 ff=unix sts=4 sw=4 ts=4 : }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
