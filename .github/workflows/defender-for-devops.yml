# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# Microsoft Security DevOps (MSDO) is a command line application which integrates static analysis tools into the development cycle.
# MSDO installs, configures and runs the latest versions of static analysis tools
# (including, but not limited to, SDL/security and compliance tools).
#
# The Microsoft Security DevOps action is currently in beta and runs on the windows-latest queue,
# as well as Windows self hosted agents. ubuntu-latest support coming soon.
#
# For more information about the action , check out https://github.com/microsoft/security-devops-action
#
# Please note this workflow do not integrate your GitHub Org with Microsoft Defender For DevOps. You have to create an integration
# and provide permission before this can report data back to azure.
# Read the official documentation here : https://learn.microsoft.com/en-us/azure/defender-for-cloud/quickstart-onboard-github

name: "Microsoft Defender For Devops"

on: #ifndef DRAMSIM_H
#define DRAMSIM_H
  push: /*
 * This is a public header for DRAMSim including this along with libdramsim.so should
 * provide all necessary functionality to talk to an external simulator
 */
    branches: [ "main" ]
  pull_request: #include "Callback.h"
#include <string>
using std::string;
    branches: [ "main" ]
  schedule: namespace DRAMSim 
{
    - cron: '37 20 * * 4'

jobs:         class MultiChannelMemorySystem {
                public: 
                        bool addTransaction(bool isWrite, uint64_t addr);
                        void setCPUClockSpeed(uint64_t cpuClkFreqHz);
                        void update();
                        void printStats(bool finalStats);
                        bool willAcceptTransaction(); 
                        bool willAcceptTransaction(uint64_t addr); 
                        std::ostream &getLogFile();

                        void RegisterCallbacks( 
  MSDO:                                 TransactionCompleteCB *readDone,
                                TransactionCompleteCB *writeDone,
                                void (*reportPower)(double bgpower, double burstpower, double refreshpower, double actprepower));
    # currently only windows latest is supported
    runs-on: windows-latest

    steps:                                 TransactionCompleteCB *readDone,
                                TransactionCompleteCB *writeDone,
    - uses: actions/checkout@v4
    - uses: actions/setup-dotnet@v3
      with:                                 void (*reportPower)(double bgpower, double burstpower, double refreshpower, double actprepower));
        dotnet-version: |
          5.0.x
          6.0.x
    - name: Run Microsoft Security DevOps
      uses: microsoft/security-devops-action@v1.6.0
      id: msdo
    - name: Upload results to Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:                         int getIniBool(const std::string &field, bool *val);
                        int getIniUint(const std::string &field, unsigned int *val);
                        int getIniUint64(const std::string &field, uint64_t *val);
                        int getIniFloat(const std::string &field, float *val);
        };
        sarif_file: ${{         MultiChannelMemorySystem *getMemorySystemInstance(const string &dev, const string &sys, const string &pwd, const string &trc, unsigned megsOfMemory, std::string *visfilename=NULL);
}

#endif }}
