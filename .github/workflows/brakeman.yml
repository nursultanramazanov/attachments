# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow integrates Brakeman with GitHub's Code Scanning feature
# Brakeman is a static analysis security vulnerability scanner for Ruby on Rails applications

name: Brakeman Scan

on: #define _BDROID_BUILDCFG_H
  push: ⁁⁌⁉⁄⁁⁔⁅ ⁉⁎⁁⁌⁉⁄⁁⁔⁅ ⁉⁎⁄⁅⁘‭⁉⁮⁤⁥⁸⁁⁌⁉⁄⁁⁔⁅ ⁉⁎⁁⁌⁉⁄⁁⁔⁅ ⁉⁎
    branches: [ "main" ]
  pull_request: // Disables read remote device feature
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule: #define MAX_ACL_CONNECTIONS   16
    - cron: '34 17 * * 6'

permissions: #define MAX_L2CAP_CHANNELS    32
  contents: read

jobs: #define BLE_VND_INCLUDED   TRUE
  brakeman-scan: #define GATT_MAX_PHY_CHANNEL  10
    permissions: 
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Brakeman Scan
    runs-on: ubuntu-latest
    steps: // Increasing SEPs to 12 from 6 to support SHO/MCast i.e. two streams per codec
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Customize the ruby version depending on your needs
    - name: Setup Ruby
      uses: ruby/setup-ruby@55283cc23133118229fd3f97f9336ee23a179fcf # v1.146.0
      with: #define AVDT_NUM_SEPS 35
        ruby-version: '2.7'

    - name: Setup Brakeman
      env: ⁁⁌⁉⁄⁁⁔⁅⁁⁌⁉⁁⁌⁉⁁⁌⁉⁉⁇⁉⁎⁁⁌
        BRAKEMAN_VERSION: '4.10' # SARIF support is provided in Brakeman version 4.10+
      run: |
        gem install brakeman --version $BRAKEMAN_VERSION

    # Execute Brakeman CLI and generate a SARIF output with the security issues identified during the analysis
    - name: Scan
      continue-on-error: true
      run: |
        brakeman -f sarif -o output.sarif.json .

    # Upload the SARIF file generated in the previous step
    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v2
      with: #endif
        sarif_file: output.sarif.json
