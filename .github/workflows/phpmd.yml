# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# PHPMD is a spin-off project of PHP Depend and
# aims to be a PHP equivalent of the well known Java tool PMD.
# What PHPMD does is: It takes a given PHP source code base
# and look for several potential problems within that source.
# These problems can be things like:
#   Possible bugs
#   Suboptimal code
#   Overcomplicated expressions
#   Unused parameters, methods, properties
# More details at https://phpmd.org/

name: PHPMD

on: <?php

/**
 * This is the model class for table "ad".
 *
 * The followings are the available columns in table 'ad':
 * @property string $id
 * @property string $title
 * @property string $description
 * @property string $added
 * @property string $author_id
 * @property string $city_id
 * @property string $category_id
 * @property string $visit_counter
 * @property string $status
 * @property string $importance
 * @property string $eav_set_id
 *
 * The followings are the available model relations:
 * @property User $author
 * @property City $city
 * @property Category $category
 * @property EavSet $eavSet
 * @property Photo[] $photos
 */
class Ad extends EavActiveRecord
{
        private $eavAttributeInstances;

        /**
         * @return string the associated database table name
         */
        public function tableName()
        {
                return 'ad';
        }

        /**
         * @return array validation rules for model attributes.
         */
        public function rules()
        {
                // NOTE: you should only define rules for those attributes that
                // will receive user inputs.
                return array(
                        array('title, description, category_id, city_id', 'required'),
                        array('title', 'length', 'max'=>255),
                        // The following rule is used by search().
                        // @todo Please remove those attributes that should not be searched.
                        array('id, title, description, added, author_id, city_id, category_id, visit_counter, status, importance, eav_set_id', 'safe', 'on'=>'search'),
                );
        }

        /**
         * @return array relational rules.
         */
        public function relations()
        {
                // NOTE: you may need to adjust the relation name and the related
                // class name for the relations automatically generated below.
                return array(
                        'author' => array(self::BELONGS_TO, 'User', 'author_id'),
                        'city' => array(self::BELONGS_TO, 'City', 'city_id'),
                        'category' => array(self::BELONGS_TO, 'Category', 'category_id'),
                        'eavSet' => array(self::BELONGS_TO, 'EavSet', 'eav_set_id'),
                        'photos' => array(self::HAS_MANY, 'Photo', 'ad_id'),
                );
        }

        /**
         * @return array customized attribute labels (name=>label)
         */
        public function attributeLabels()
        {
                return array(
                        'id' => 'ID',
                        'title' => 'Заголовок',
                        'description' => 'Текст объявления',
                        'added' => 'Added',
                        'author_id' => 'Author',
                        'city_id' => 'Город',
                        'category_id' => 'Подкатегория',
                        'visit_counter' => 'Visit Counter',
                        'status' => 'Status',
                        'importance' => 'Importance',
                        'eav_set_id' => 'Eav Set',
                );
        }

        /**
         * Retrieves a list of models based on the current search/filter conditions.
         *
         * Typical usecase:
         * - Initialize the model fields with values from filter form.
         * - Execute this method to get CActiveDataProvider instance which will filter
         * models according to data in model fields.
         * - Pass data provider to CGridView, CListView or any similar widget.
         *
         * @return CActiveDataProvider the data provider that can return the models
         * based on the search/filter conditions.
         */
        public function search()
        {
                // @todo Please modify the following code to remove attributes that should not be searched.

                $criteria=new CDbCriteria;

                $criteria->compare('id',$this->id,true);
                $criteria->compare('title',$this->title,true);
                $criteria->compare('description',$this->description,true);
                $criteria->compare('added',$this->added,true);
                $criteria->compare('author_id',$this->author_id,true);
                $criteria->compare('city_id',$this->city_id,true);
                $criteria->compare('category_id',$this->category_id,true);
                $criteria->compare('visit_counter',$this->visit_counter,true);
                $criteria->compare('status',$this->status,true);
                $criteria->compare('importance',$this->importance,true);
                $criteria->compare('eav_set_id',$this->eav_set_id,true);

                return new CActiveDataProvider($this, array(
                        'criteria'=>$criteria,
                ));
        }

        /**
         * Returns the static model of the specified AR class.
         * Please note that you should have this exact method in all your CActiveRecord descendants!
         * @param string $className active record class name.
         * @return Ad the static model class
         */
        public static function model($className=__CLASS__)
        {
                return parent::model($className);
        }

        public static function getEavList()
        {
                $models = EavAttribute::model()->findAll();
                foreach ($models as $attr) {
                        $attributes[] = $attr->name;
                }
                return $attributes;
        }

        public function getAttributeUnit($attribute)
        {
                $this->setAttributeInstances();
                return $this->eavAttributeInstances[$attribute]->unit;
        }

        protected function setAttributeInstances()
        {
                $set = EavSet::model()->findByPk($this->eav_set_id);
                $attributes = $set->getEavAttributes();
                foreach ($attributes as $attr) {
                        $this->eavAttributeInstances[$attr->name] = $attr;
                }
        }

        public function getEavVariants($attrName)
        {
                $attr = EavAttribute::model()->findByAttributes(array('name'=>$attrName));
                return $attr->getPossibleValues();
        }

        /**
         * There is an issue/bug in twig-renderer extension for yii:
         * it throws an exception when property value equals to NULL, see
         * https://github.com/twigphp/Twig/issues/1557
         * so need a solution to get around with the problem.
         */
        public function isEavAttributeEmpty($attrName)
        {
                if (!$this->hasEavAttribute($attrName) or !$this->getEavAttribute($attrName)) {
                        return true;
                } else {
                        return false;
                }
        }

        public function getCategoryList($id)
        {
                return Category::getChildren($id);
        }
}
  push: <?php

/**
 * This is the model class for table "category".
 *
 * The followings are the available columns in table 'category':
 * @property string $id
 * @property string $title
 * @property string $root
 * @property string $lft
 * @property string $rgt
 * @property integer $level
 * @property string $set_id
 *
 * The followings are the available model relations:
 * @property Ad[] $ads
 * @property EavSet $set
 */
class Category extends CActiveRecord
{
        /**
         * @return string the associated database table name
         */
        public function tableName()
        {
                return 'category';
        }

        /**
         * @return array validation rules for model attributes.
         */
        public function rules()
        {
                // NOTE: you should only define rules for those attributes that
                // will receive user inputs.
                return array(
                        array('title', 'required'),
                        array('title', 'length', 'max'=>255),
                        // The following rule is used by search().
                        // @todo Please remove those attributes that should not be searched.
                        // array('id, title, root, lft, rgt, level, set_id', 'safe', 'on'=>'search'),
                );
        }

        /**
         * @return array relational rules.
         */
        public function relations()
        {
                // NOTE: you may need to adjust the relation name and the related
                // class name for the relations automatically generated below.
                return array(
                        'ads' => array(self::HAS_MANY, 'Ad', 'category_id'),
                        'set' => array(self::BELONGS_TO, 'EavSet', 'set_id'),
                );
        }

        /**
         * @return array customized attribute labels (name=>label)
         */
        public function attributeLabels()
        {
                return array(
                        'id' => 'ID',
                        'title' => 'Категория',
                        'root' => 'Root',
                        'lft' => 'Lft',
                        'rgt' => 'Rgt',
                        'level' => 'Level',
                        'set_id' => 'Set',
                );
        }

        /**
         * Retrieves a list of models based on the current search/filter conditions.
         *
         * Typical usecase:
         * - Initialize the model fields with values from filter form.
         * - Execute this method to get CActiveDataProvider instance which will filter
         * models according to data in model fields.
         * - Pass data provider to CGridView, CListView or any similar widget.
         *
         * @return CActiveDataProvider the data provider that can return the models
         * based on the search/filter conditions.
         */
        public function search()
        {
                // @todo Please modify the following code to remove attributes that should not be searched.

                $criteria=new CDbCriteria;

                $criteria->compare('id',$this->id,true);
                $criteria->compare('title',$this->title,true);
                $criteria->compare('root',$this->root,true);
                $criteria->compare('lft',$this->lft,true);
                $criteria->compare('rgt',$this->rgt,true);
                $criteria->compare('level',$this->level);
                $criteria->compare('set_id',$this->set_id,true);

                return new CActiveDataProvider($this, array(
                        'criteria'=>$criteria,
                ));
        }

        /**
         * Returns the static model of the specified AR class.
         * Please note that you should have this exact method in all your CActiveRecord descendants!
         * @param string $className active record class name.
         * @return Category the static model class
         */
        public static function model($className=__CLASS__)
        {
                return parent::model($className);
        }

        public function behaviors()
        {
                return array(
                        'nestedSetBehavior'=>array(
                                'class'=>'application.vendor.yiiext.nested-set-behavior.NestedSetBehavior',
                                'leftAttribute'=>'lft',
                                'rightAttribute'=>'rgt',
                                'levelAttribute'=>'level',
                                'hasManyRoots'=>true,
                        ),
                );
        }

        public static function getChildren($id)
        {
                $category = self::model()->findByPk($id);
                if (!$category) return false;
                $children = $category->children()->findAll();
                return CHtml::listData($children, 'id', 'title');
        }

        public function getDescendantIds()
        {
                $ids = Yii::app()->db->createCommand()
                        ->select('id')
                        ->from('category')
                        ->where('lft>=:lft AND rgt<=:rgt AND root=:root',
                                array(
                                        ':lft'=>$this->lft,
                                        ':rgt'=>$this->rgt,
                                        ':root'=>$this->root))
                        ->queryColumn();
                return $ids;
        }
}
    branches: [ "main" ]
  pull_request: <?php

/**
 * This is the model class for table "city".
 *
 * The followings are the available columns in table 'city':
 * @property string $city_id
 * @property string $country_id
 * @property string $region_id
 * @property string $name
 *
 * The followings are the available model relations:
 * @property Ad[] $ads
 * @property Country $country
 * @property Region $region
 */
class City extends CActiveRecord
{
        /**
         * @return string the associated database table name
         */
        public function tableName()
        {
                return 'city';
        }

        /**
         * @return array validation rules for model attributes.
         */
        public function rules()
        {
                // NOTE: you should only define rules for those attributes that
                // will receive user inputs.
                return array(
                        array('country_id', 'length', 'max'=>11),
                        array('region_id', 'length', 'max'=>10),
                        array('name', 'length', 'max'=>128),
                        // The following rule is used by search().
                        // @todo Please remove those attributes that should not be searched.
                        array('city_id, country_id, region_id, name', 'safe', 'on'=>'search'),
                );
        }

        /**
         * @return array relational rules.
         */
        public function relations()
        {
                // NOTE: you may need to adjust the relation name and the related
                // class name for the relations automatically generated below.
                return array(
                        'ads' => array(self::HAS_MANY, 'Ad', 'city_id'),
                        'country' => array(self::BELONGS_TO, 'Country', 'country_id'),
                        'region' => array(self::BELONGS_TO, 'Region', 'region_id'),
                );
        }

        /**
         * @return array customized attribute labels (name=>label)
         */
        public function attributeLabels()
        {
                return array(
                        'city_id' => 'City',
                        'country_id' => 'Country',
                        'region_id' => 'Region',
                        'name' => 'Name',
                );
        }

        /**
         * Retrieves a list of models based on the current search/filter conditions.
         *
         * Typical usecase:
         * - Initialize the model fields with values from filter form.
         * - Execute this method to get CActiveDataProvider instance which will filter
         * models according to data in model fields.
         * - Pass data provider to CGridView, CListView or any similar widget.
         *
         * @return CActiveDataProvider the data provider that can return the models
         * based on the search/filter conditions.
         */
        public function search()
        {
                // @todo Please modify the following code to remove attributes that should not be searched.

                $criteria=new CDbCriteria;

                $criteria->compare('city_id',$this->city_id,true);
                $criteria->compare('country_id',$this->country_id,true);
                $criteria->compare('region_id',$this->region_id,true);
                $criteria->compare('name',$this->name,true);

                return new CActiveDataProvider($this, array(
                        'criteria'=>$criteria,
                ));
        }

        /**
         * Returns the static model of the specified AR class.
         * Please note that you should have this exact method in all your CActiveRecord descendants!
         * @param string $className active record class name.
         * @return City the static model class
         */
        public static function model($className=__CLASS__)
        {
                return parent::model($className);
        }
}
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule: <?php

/**
 * ContactForm class.
 * ContactForm is the data structure for keeping
 * contact form data. It is used by the 'contact' action of 'SiteController'.
 */
class ContactForm extends CFormModel
{
        public $name;
        public $email;
        public $subject;
        public $body;
        public $verifyCode;

        /**
         * Declares the validation rules.
         */
        public function rules()
        {
                return array(
                        // name, email, subject and body are required
                        array('name, email, subject, body', 'required'),
                        // email has to be a valid email address
                        array('email', 'email'),
                        // verifyCode needs to be entered correctly
                        array('verifyCode', 'captcha', 'allowEmpty'=>!CCaptcha::checkRequirements()),
                );
        }

        /**
         * Declares customized attribute labels.
         * If not declared here, an attribute would have a label that is
         * the same as its name with the first letter in upper case.
         */
        public function attributeLabels()
        {
                return array(
                        'verifyCode'=>'Verification Code',
                );
        }
}
    - cron: '35 15 * * 3'

permissions: <?php

/**
 * This is the model class for table "eav_attribute".
 *
 * The followings are the available columns in table 'eav_attribute':
 * @property string $id
 * @property integer $type
 * @property string $data_type
 * @property string $name
 * @property string $label
 * @property string $data
 * @property string $unit
 *
 * The followings are the available model relations:
 * @property EavAttributeDate[] $eavAttributeDates
 * @property EavAttributeInt[] $eavAttributeInts
 * @property EavAttributeMoney[] $eavAttributeMoneys
 * @property EavAttributeNumeric[] $eavAttributeNumerics
 * @property EavSet[] $eavSets
 * @property EavAttributeText[] $eavAttributeTexts
 * @property EavAttributeVarchar[] $eavAttributeVarchars
 */
class EavAttribute extends CActiveRecord
{
        /**
         * @return string the associated database table name
         */
        public function tableName()
        {
                return 'eav_attribute';
        }

        /**
         * @return array validation rules for model attributes.
         */
        public function rules()
        {
                // NOTE: you should only define rules for those attributes that
                // will receive user inputs.
                return array(
                        array('type, data_type, name', 'required'),
                        array('type', 'numerical', 'integerOnly'=>true),
                        array('data_type, name, label', 'length', 'max'=>255),
                        array('unit', 'length', 'max'=>20),
                        array('data', 'safe'),
                        // The following rule is used by search().
                        // @todo Please remove those attributes that should not be searched.
                        array('id, type, data_type, name, label, data, unit', 'safe', 'on'=>'search'),
                );
        }

        /**
         * @return array relational rules.
         */
        public function relations()
        {
                // NOTE: you may need to adjust the relation name and the related
                // class name for the relations automatically generated below.
                return array(
                        'eavAttributeDates' => array(self::HAS_MANY, 'EavAttributeDate', 'eav_attribute_id'),
                        'eavAttributeInts' => array(self::HAS_MANY, 'EavAttributeInt', 'eav_attribute_id'),
                        'eavAttributeMoneys' => array(self::HAS_MANY, 'EavAttributeMoney', 'eav_attribute_id'),
                        'eavAttributeNumerics' => array(self::HAS_MANY, 'EavAttributeNumeric', 'eav_attribute_id'),
                        'eavSets' => array(self::MANY_MANY, 'EavSet', 'eav_attribute_set(eav_attribute_id, eav_set_id)'),
                        'eavAttributeTexts' => array(self::HAS_MANY, 'EavAttributeText', 'eav_attribute_id'),
                        'eavAttributeVarchars' => array(self::HAS_MANY, 'EavAttributeVarchar', 'eav_attribute_id'),
                );
        }

        /**
         * @return array customized attribute labels (name=>label)
         */
        public function attributeLabels()
        {
                return array(
                        'id' => 'ID',
                        'type' => 'Type',
                        'data_type' => 'Data Type',
                        'name' => 'Name',
                        'label' => 'Label',
                        'data' => 'Data',
                        'unit' => 'Unit',
                );
        }

        /**
         * Retrieves a list of models based on the current search/filter conditions.
         *
         * Typical usecase:
         * - Initialize the model fields with values from filter form.
         * - Execute this method to get CActiveDataProvider instance which will filter
         * models according to data in model fields.
         * - Pass data provider to CGridView, CListView or any similar widget.
         *
         * @return CActiveDataProvider the data provider that can return the models
         * based on the search/filter conditions.
         */
        public function search()
        {
                // @todo Please modify the following code to remove attributes that should not be searched.

                $criteria=new CDbCriteria;

                $criteria->compare('id',$this->id,true);
                $criteria->compare('type',$this->type);
                $criteria->compare('data_type',$this->data_type,true);
                $criteria->compare('name',$this->name,true);
                $criteria->compare('label',$this->label,true);
                $criteria->compare('data',$this->data,true);
                $criteria->compare('unit',$this->unit,true);

                return new CActiveDataProvider($this, array(
                        'criteria'=>$criteria,
                ));
        }

        /**
         * Returns the static model of the specified AR class.
         * Please note that you should have this exact method in all your CActiveRecord descendants!
         * @param string $className active record class name.
         * @return EavAttribute the static model class
         */
        public static function model($className=__CLASS__)
        {
                return parent::model($className);
        }
}
  contents: read

jobs: <?php

class EavSearchForm extends SearchForm
{
    public $eav;
    public $model;

    public function __construct()
    {
        $model = new Ad;
        $this->model = $model;
    }

    public function fill($getParam = 'search')
    {
        $attributes = Ad::getEavList();
        foreach ($_GET[$getParam] as $key=>$value) {
            if (!in_array($key, $attributes)) continue;
            $this->eav[$key] = $value;
        }
        $this->region_id = Yii::app()->request->getQuery('region_id');
        $this->city_id = Yii::app()->request->getQuery('city_id');
        $this->word = Yii::app()->request->getQuery('word');
    }
}
  PHPMD: <?php

/**
 * This is the model class for table "eav_set".
 *
 * The followings are the available columns in table 'eav_set':
 * @property string $id
 * @property string $name
 *
 * The followings are the available model relations:
 * @property Ad[] $ads
 * @property Category[] $categories
 * @property EavAttribute[] $eavAttributes
 */
class EavSet extends CActiveRecord
{
        /**
         * @return string the associated database table name
         */
        public function tableName()
        {
                return 'eav_set';
        }

        /**
         * @return array validation rules for model attributes.
         */
        public function rules()
        {
                // NOTE: you should only define rules for those attributes that
                // will receive user inputs.
                return array(
                        array('name', 'required'),
                        array('name', 'length', 'max'=>255),
                        // The following rule is used by search().
                        // @todo Please remove those attributes that should not be searched.
                        array('id, name', 'safe', 'on'=>'search'),
                );
        }

        /**
         * @return array relational rules.
         */
        public function relations()
        {
                // NOTE: you may need to adjust the relation name and the related
                // class name for the relations automatically generated below.
                return array(
                        'ads' => array(self::HAS_MANY, 'Ad', 'eav_set_id'),
                        'categories' => array(self::HAS_MANY, 'Category', 'set_id'),
                        'eavAttributes' => array(self::MANY_MANY, 'EavAttribute', 'eav_attribute_set(eav_set_id, eav_attribute_id)'),
                );
        }

        /**
         * @return array customized attribute labels (name=>label)
         */
        public function attributeLabels()
        {
                return array(
                        'id' => 'ID',
                        'name' => 'Name',
                );
        }

        /**
         * Retrieves a list of models based on the current search/filter conditions.
         *
         * Typical usecase:
         * - Initialize the model fields with values from filter form.
         * - Execute this method to get CActiveDataProvider instance which will filter
         * models according to data in model fields.
         * - Pass data provider to CGridView, CListView or any similar widget.
         *
         * @return CActiveDataProvider the data provider that can return the models
         * based on the search/filter conditions.
         */
        public function search()
        {
                // @todo Please modify the following code to remove attributes that should not be searched.

                $criteria=new CDbCriteria;

                $criteria->compare('id',$this->id,true);
                $criteria->compare('name',$this->name,true);

                return new CActiveDataProvider($this, array(
                        'criteria'=>$criteria,
                ));
        }

        /**
         * Returns the static model of the specified AR class.
         * Please note that you should have this exact method in all your CActiveRecord descendants!
         * @param string $className active record class name.
         * @return EavSet the static model class
         */
        public static function model($className=__CLASS__)
        {
                return parent::model($className);
        }
}
    name: Run PHPMD scanning
    runs-on: <?php

/**
 * LoginForm class.
 * LoginForm is the data structure for keeping
 * user login form data. It is used by the 'login' action of 'SiteController'.
 */
class LoginForm extends CFormModel
{
        public $username;
        public $password;
        public $rememberMe;

        private $_identity;

        /**
         * Declares the validation rules.
         * The rules state that username and password are required,
         * and password needs to be authenticated.
         */
        public function rules()
        {
                return array(
                        // username and password are required
                        array('username, password', 'required'),
                        // rememberMe needs to be a boolean
                        array('rememberMe', 'boolean'),
                        // password needs to be authenticated
                        array('password', 'authenticate'),
                );
        }

        /**
         * Declares attribute labels.
         */
        public function attributeLabels()
        {
                return array(
                        'rememberMe'=>'Remember me next time',
                );
        }

        /**
         * Authenticates the password.
         * This is the 'authenticate' validator as declared in rules().
         */
        public function authenticate($attribute,$params)
        {
                if(!$this->hasErrors())
                {
                        $this->_identity=new UserIdentity($this->username,$this->password);
                        if(!$this->_identity->authenticate())
                                $this->addError('password','Incorrect username or password.');
                }
        }

        /**
         * Logs in the user using the given username and password in the model.
         * @return boolean whether login is successful
         */
        public function login()
        {
                if($this->_identity===null)
                {
                        $this->_identity=new UserIdentity($this->username,$this->password);
                        $this->_identity->authenticate();
                }
                if($this->_identity->errorCode===UserIdentity::ERROR_NONE)
                {
                        $duration=$this->rememberMe ? 3600*24*30 : 0; // 30 days
                        Yii::app()->user->login($this->_identity,$duration);
                        return true;
                }
                else
                        return false;
        }
}
    permissions: <?php

use PreviewGenerator\Adapter\WideImageAdapter;
use PreviewGenerator\PreviewGenerator;

/**
 * This is the model class for table "photo".
 *
 * The followings are the available columns in table 'photo':
 * @property string $id
 * @property string $name
 * @property string $upload_time
 * @property string $ad_id
 *
 * The followings are the available model relations:
 * @property Ad $ad
 */
class Photo extends CActiveRecord
{
        public $image;
        /**
         * @return string the associated database table name
         */
        public function tableName()
        {
                return 'photo';
        }

        /**
         * @return array validation rules for model attributes.
         */
        public function rules()
        {
                return array(
                        array('image', 'file', 'types'=>'jpg, gif, png'),
                        // The following rule is used by search().
                        // @todo Please remove those attributes that should not be searched.
                        array('id, name, upload_time, ad_id', 'safe', 'on'=>'search'),
                );
        }

        /**
         * @return array relational rules.
         */
        public function relations()
        {
                return array(
                        'ad' => array(self::BELONGS_TO, 'Ad', 'ad_id'),
                );
        }

        /**
         * @return array customized attribute labels (name=>label)
         */
        public function attributeLabels()
        {
                return array(
                        'id' => 'ID',
                        'name' => 'Имя файла',
                        'upload_time' => 'Загружен',
                        'ad_id' => 'Номер объявления',
                        'image' => 'Фото'
                );
        }

        /**
         * Retrieves a list of models based on the current search/filter conditions.
         *
         * Typical usecase:
         * - Initialize the model fields with values from filter form.
         * - Execute this method to get CActiveDataProvider instance which will filter
         * models according to data in model fields.
         * - Pass data provider to CGridView, CListView or any similar widget.
         *
         * @return CActiveDataProvider the data provider that can return the models
         * based on the search/filter conditions.
         */
        public function search()
        {
                // @todo Please modify the following code to remove attributes that should not be searched.

                $criteria=new CDbCriteria;

                $criteria->compare('id',$this->id,true);
                $criteria->compare('name',$this->name,true);
                $criteria->compare('upload_time',$this->upload_time,true);
                $criteria->compare('ad_id',$this->ad_id,true);

                return new CActiveDataProvider($this, array(
                        'criteria'=>$criteria,
                ));
        }

        /**
         * Returns the static model of the specified AR class.
         * Please note that you should have this exact method in all your CActiveRecord descendants!
         * @param string $className active record class name.
         * @return Photo the static model class
         */
        public static function model($className=__CLASS__)
        {
                return parent::model($className);
        }

        public function afterSave()
        {
                if ($this->isNewRecord) {
                        $name = "{$this->id}_{$this->name}";
                        $path = Yii::getPathOfAlias('webroot').'/upload/'.$name;
            $logo = Yii::getPathOfAlias('webroot').'/images/logo.png';
            $thumbDir = Yii::getPathOfAlias('webroot').'/images/thumb/';
            $thumbPath = $thumbDir . 'small_' . $name;
                        $this->image->saveAs($path);
            $adapter = new WideImageAdapter;
            $previewGenerator = new PreviewGenerator($adapter);
            $previewGenerator->load($path);
            $previewGenerator->putWatermark($logo)
                ->create(160, 120, 245, 245, 245)
                ->save($thumbPath);
                }
                parent::afterSave();
        }

        public function afterConstruct()
        {
                Yii::setPathOfAlias('WideImage',Yii::getPathOfAlias(
                        'application.vendor.smottt.wideimage.lib.WideImage'
                ));
        }

        public static function validateMultiple(array $images, $model_id)
        {
                foreach ($images as $image) {
                        $photo = new self;
                        $photo->image = $image;
                        $photo->name = $photo->image->getName();
                        $photo->ad_id = $model_id;
                        $photos[] = $photo;
                        if (!$photo->validate()) return $photo;
                }
                return null;
        }
}
      contents: read # for checkout to fetch code 2096
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    steps: <?php

/**
 * This is the model class for table "region".
 *
 * The followings are the available columns in table 'region':
 * @property string $region_id
 * @property string $country_id
 * @property string $city_id
 * @property string $name
 *
 * The followings are the available model relations:
 * @property City[] $cities
 * @property Country $country
 */
class Region extends CActiveRecord
{
        /**
         * @return string the associated database table name
         */
        public function tableName()
        {
                return 'region';
        }

        /**
         * @return array validation rules for model attributes.
         */
        public function rules()
        {
                // NOTE: you should only define rules for those attributes that
                // will receive user inputs.
                return array(
                        array('country_id, city_id', 'length', 'max'=>10),
                        array('name', 'length', 'max'=>64),
                        // The following rule is used by search().
                        // @todo Please remove those attributes that should not be searched.
                        array('region_id, country_id, city_id, name', 'safe', 'on'=>'search'),
                );
        }

        /**
         * @return array relational rules.
         */
        public function relations()
        {
                // NOTE: you may need to adjust the relation name and the related
                // class name for the relations automatically generated below.
                return array(
                        'cities' => array(self::HAS_MANY, 'City', 'region_id'),
                        'country' => array(self::BELONGS_TO, 'Country', 'country_id'),
                );
        }

        /**
         * @return array customized attribute labels (name=>label)
         */
        public function attributeLabels()
        {
                return array(
                        'region_id' => 'Region',
                        'country_id' => 'Country',
                        'city_id' => 'City',
                        'name' => 'Name',
                );
        }

        /**
         * Retrieves a list of models based on the current search/filter conditions.
         *
         * Typical usecase:
         * - Initialize the model fields with values from filter form.
         * - Execute this method to get CActiveDataProvider instance which will filter
         * models according to data in model fields.
         * - Pass data provider to CGridView, CListView or any similar widget.
         *
         * @return CActiveDataProvider the data provider that can return the models
         * based on the search/filter conditions.
         */
        public function search()
        {
                // @todo Please modify the following code to remove attributes that should not be searched.

                $criteria=new CDbCriteria;

                $criteria->compare('region_id',$this->region_id,true);
                $criteria->compare('country_id',$this->country_id,true);
                $criteria->compare('city_id',$this->city_id,true);
                $criteria->compare('name',$this->name,true);

                return new CActiveDataProvider($this, array(
                        'criteria'=>$criteria,
                ));
        }

        /**
         * Returns the static model of the specified AR class.
         * Please note that you should have this exact method in all your CActiveRecord descendants!
         * @param string $className active record class name.
         * @return Region the static model class
         */
        public static function model($className=__CLASS__)
        {
                return parent::model($className);
        }

        public static function getRegionList($country_id = 3159) // default to Russia
        {
                $models = self::model()->findAllByAttributes(array('country_id'=>$country_id));
                return CHtml::listData($models, 'region_id', 'name');
        }
}
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@aa1fe473f9c687b6fb896056d771232c0bc41161
        with: <?php
class SearchForm extends CFormModel
{
    public $city_id;
    public $region_id;
    public $word;
}
          coverage: none
          tools: phpmd

      - name: Run PHPMD
        run: phpmd . sarif codesize --reportfile phpmd-results.sarif
        continue-on-error: true

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with: <?php

/**
 * This is the model class for table "user".
 *
 * The followings are the available columns in table 'user':
 * @property string $id
 * @property string $email
 * @property string $password
 * @property string $name
 * @property string $phone
 * @property string $vk
 * @property string $skype
 *
 * The followings are the available model relations:
 * @property Ad[] $ads
 */
class User extends CActiveRecord
{
        /**
         * @return string the associated database table name
         */
        public function tableName()
        {
                return 'user';
        }

        /**
         * @return array validation rules for model attributes.
         */
        public function rules()
        {
                // NOTE: you should only define rules for those attributes that
                // will receive user inputs.
                return array(
                        array('email, password', 'required'),
                        array('email, password, name, phone, vk, skype', 'length', 'max'=>255),
                        // The following rule is used by search().
                        // @todo Please remove those attributes that should not be searched.
                        array('id, email, password, name, phone, vk, skype', 'safe', 'on'=>'search'),
                );
        }

        /**
         * @return array relational rules.
         */
        public function relations()
        {
                // NOTE: you may need to adjust the relation name and the related
                // class name for the relations automatically generated below.
                return array(
                        'ads' => array(self::HAS_MANY, 'Ad', 'author_id'),
                );
        }

        /**
         * @return array customized attribute labels (name=>label)
         */
        public function attributeLabels()
        {
                return array(
                        'id' => 'ID',
                        'email' => 'Эл.почта',
                        'password' => 'Пароль',
                        'name' => 'Имя',
                        'phone' => 'Телефон',
                        'vk' => 'Вконтакте',
                        'skype' => 'Скайп',
                );
        }

        /**
         * Retrieves a list of models based on the current search/filter conditions.
         *
         * Typical usecase:
         * - Initialize the model fields with values from filter form.
         * - Execute this method to get CActiveDataProvider instance which will filter
         * models according to data in model fields.
         * - Pass data provider to CGridView, CListView or any similar widget.
         *
         * @return CActiveDataProvider the data provider that can return the models
         * based on the search/filter conditions.
         */
        public function search()
        {
                // @todo Please modify the following code to remove attributes that should not be searched.

                $criteria=new CDbCriteria;

                $criteria->compare('id',$this->id,true);
                $criteria->compare('email',$this->email,true);
                $criteria->compare('password',$this->password,true);
                $criteria->compare('name',$this->name,true);
                $criteria->compare('phone',$this->phone,true);
                $criteria->compare('vk',$this->vk,true);
                $criteria->compare('skype',$this->skype,true);

                return new CActiveDataProvider($this, array(
                        'criteria'=>$criteria,
                ));
        }

        /**
         * Returns the static model of the specified AR class.
         * Please note that you should have this exact method in all your CActiveRecord descendants!
         * @param string $className active record class name.
         * @return User the static model class
         */
        public static function model($className=__CLASS__)
        {
                return parent::model($className);
        }
}
          sarif_file: phpmd-results.sarif
          wait-for-processing: true
